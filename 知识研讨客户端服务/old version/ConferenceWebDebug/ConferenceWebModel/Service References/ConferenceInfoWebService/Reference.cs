//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34003
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceWebModel.ConferenceInfoWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConferenceInfoWebService.IRevert")]
    public interface IRevert {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/Revert", ReplyAction="http://tempuri.org/IRevert/RevertResponse")]
        void Revert(string listName, int listItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/Revert", ReplyAction="http://tempuri.org/IRevert/RevertResponse")]
        System.IAsyncResult BeginRevert(string listName, int listItemId, System.AsyncCallback callback, object asyncState);
        
        void EndRevert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/GetUserlist", ReplyAction="http://tempuri.org/IRevert/GetUserlistResponse")]
        string GetUserlist(string username);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/GetUserlist", ReplyAction="http://tempuri.org/IRevert/GetUserlistResponse")]
        System.IAsyncResult BeginGetUserlist(string username, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserlist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/GetRelation", ReplyAction="http://tempuri.org/IRevert/GetRelationResponse")]
        string GetRelation(string meetingname, string siteurl);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/GetRelation", ReplyAction="http://tempuri.org/IRevert/GetRelationResponse")]
        System.IAsyncResult BeginGetRelation(string meetingname, string siteurl, System.AsyncCallback callback, object asyncState);
        
        string EndGetRelation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/TestSharepoint", ReplyAction="http://tempuri.org/IRevert/TestSharepointResponse")]
        string TestSharepoint(string LoginName, int listItemId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/TestSharepoint", ReplyAction="http://tempuri.org/IRevert/TestSharepointResponse")]
        System.IAsyncResult BeginTestSharepoint(string LoginName, int listItemId, System.AsyncCallback callback, object asyncState);
        
        string EndTestSharepoint(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/GetDownLodeFile", ReplyAction="http://tempuri.org/IRevert/GetDownLodeFileResponse")]
        byte[] GetDownLodeFile(string weburl, string document, string siteurl, string LoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/GetDownLodeFile", ReplyAction="http://tempuri.org/IRevert/GetDownLodeFileResponse")]
        System.IAsyncResult BeginGetDownLodeFile(string weburl, string document, string siteurl, string LoginName, System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetDownLodeFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/FileUpload", ReplyAction="http://tempuri.org/IRevert/FileUploadResponse")]
        bool FileUpload(string WebUrl, string FileName, byte[] FileBytes, string PFolderUrl, string siteurl, string LoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/FileUpload", ReplyAction="http://tempuri.org/IRevert/FileUploadResponse")]
        System.IAsyncResult BeginFileUpload(string WebUrl, string FileName, byte[] FileBytes, string PFolderUrl, string siteurl, string LoginName, System.AsyncCallback callback, object asyncState);
        
        bool EndFileUpload(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/GetOrderInfo", ReplyAction="http://tempuri.org/IRevert/GetOrderInfoResponse")]
        string GetOrderInfo(string WebUrl, string siteurl, string StartTime, string EndTime, string State);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/GetOrderInfo", ReplyAction="http://tempuri.org/IRevert/GetOrderInfoResponse")]
        System.IAsyncResult BeginGetOrderInfo(string WebUrl, string siteurl, string StartTime, string EndTime, string State, System.AsyncCallback callback, object asyncState);
        
        string EndGetOrderInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/GetMeetInfoNow", ReplyAction="http://tempuri.org/IRevert/GetMeetInfoNowResponse")]
        string GetMeetInfoNow();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/GetMeetInfoNow", ReplyAction="http://tempuri.org/IRevert/GetMeetInfoNowResponse")]
        System.IAsyncResult BeginGetMeetInfoNow(System.AsyncCallback callback, object asyncState);
        
        string EndGetMeetInfoNow(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRevert/GetMeetInfo", ReplyAction="http://tempuri.org/IRevert/GetMeetInfoResponse")]
        string GetMeetInfo(string weburl, string document, string siteurl, string LoginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IRevert/GetMeetInfo", ReplyAction="http://tempuri.org/IRevert/GetMeetInfoResponse")]
        System.IAsyncResult BeginGetMeetInfo(string weburl, string document, string siteurl, string LoginName, System.AsyncCallback callback, object asyncState);
        
        string EndGetMeetInfo(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRevertChannel : ConferenceWebModel.ConferenceInfoWebService.IRevert, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserlistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserlistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestSharepointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestSharepointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDownLodeFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDownLodeFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeetInfoNowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeetInfoNowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMeetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMeetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RevertClient : System.ServiceModel.ClientBase<ConferenceWebModel.ConferenceInfoWebService.IRevert>, ConferenceWebModel.ConferenceInfoWebService.IRevert {
        
        private BeginOperationDelegate onBeginRevertDelegate;
        
        private EndOperationDelegate onEndRevertDelegate;
        
        private System.Threading.SendOrPostCallback onRevertCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserlistDelegate;
        
        private EndOperationDelegate onEndGetUserlistDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserlistCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRelationDelegate;
        
        private EndOperationDelegate onEndGetRelationDelegate;
        
        private System.Threading.SendOrPostCallback onGetRelationCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestSharepointDelegate;
        
        private EndOperationDelegate onEndTestSharepointDelegate;
        
        private System.Threading.SendOrPostCallback onTestSharepointCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDownLodeFileDelegate;
        
        private EndOperationDelegate onEndGetDownLodeFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetDownLodeFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginFileUploadDelegate;
        
        private EndOperationDelegate onEndFileUploadDelegate;
        
        private System.Threading.SendOrPostCallback onFileUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOrderInfoDelegate;
        
        private EndOperationDelegate onEndGetOrderInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetOrderInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMeetInfoNowDelegate;
        
        private EndOperationDelegate onEndGetMeetInfoNowDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeetInfoNowCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMeetInfoDelegate;
        
        private EndOperationDelegate onEndGetMeetInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetMeetInfoCompletedDelegate;
        
        public RevertClient() {
        }
        
        public RevertClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RevertClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RevertClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RevertClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RevertCompleted;
        
        public event System.EventHandler<GetUserlistCompletedEventArgs> GetUserlistCompleted;
        
        public event System.EventHandler<GetRelationCompletedEventArgs> GetRelationCompleted;
        
        public event System.EventHandler<TestSharepointCompletedEventArgs> TestSharepointCompleted;
        
        public event System.EventHandler<GetDownLodeFileCompletedEventArgs> GetDownLodeFileCompleted;
        
        public event System.EventHandler<FileUploadCompletedEventArgs> FileUploadCompleted;
        
        public event System.EventHandler<GetOrderInfoCompletedEventArgs> GetOrderInfoCompleted;
        
        public event System.EventHandler<GetMeetInfoNowCompletedEventArgs> GetMeetInfoNowCompleted;
        
        public event System.EventHandler<GetMeetInfoCompletedEventArgs> GetMeetInfoCompleted;
        
        public void Revert(string listName, int listItemId) {
            base.Channel.Revert(listName, listItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRevert(string listName, int listItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRevert(listName, listItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRevert(System.IAsyncResult result) {
            base.Channel.EndRevert(result);
        }
        
        private System.IAsyncResult OnBeginRevert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string listName = ((string)(inValues[0]));
            int listItemId = ((int)(inValues[1]));
            return this.BeginRevert(listName, listItemId, callback, asyncState);
        }
        
        private object[] OnEndRevert(System.IAsyncResult result) {
            this.EndRevert(result);
            return null;
        }
        
        private void OnRevertCompleted(object state) {
            if ((this.RevertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RevertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RevertAsync(string listName, int listItemId) {
            this.RevertAsync(listName, listItemId, null);
        }
        
        public void RevertAsync(string listName, int listItemId, object userState) {
            if ((this.onBeginRevertDelegate == null)) {
                this.onBeginRevertDelegate = new BeginOperationDelegate(this.OnBeginRevert);
            }
            if ((this.onEndRevertDelegate == null)) {
                this.onEndRevertDelegate = new EndOperationDelegate(this.OnEndRevert);
            }
            if ((this.onRevertCompletedDelegate == null)) {
                this.onRevertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRevertCompleted);
            }
            base.InvokeAsync(this.onBeginRevertDelegate, new object[] {
                        listName,
                        listItemId}, this.onEndRevertDelegate, this.onRevertCompletedDelegate, userState);
        }
        
        public string GetUserlist(string username) {
            return base.Channel.GetUserlist(username);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserlist(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserlist(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserlist(System.IAsyncResult result) {
            return base.Channel.EndGetUserlist(result);
        }
        
        private System.IAsyncResult OnBeginGetUserlist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return this.BeginGetUserlist(username, callback, asyncState);
        }
        
        private object[] OnEndGetUserlist(System.IAsyncResult result) {
            string retVal = this.EndGetUserlist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserlistCompleted(object state) {
            if ((this.GetUserlistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserlistCompleted(this, new GetUserlistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserlistAsync(string username) {
            this.GetUserlistAsync(username, null);
        }
        
        public void GetUserlistAsync(string username, object userState) {
            if ((this.onBeginGetUserlistDelegate == null)) {
                this.onBeginGetUserlistDelegate = new BeginOperationDelegate(this.OnBeginGetUserlist);
            }
            if ((this.onEndGetUserlistDelegate == null)) {
                this.onEndGetUserlistDelegate = new EndOperationDelegate(this.OnEndGetUserlist);
            }
            if ((this.onGetUserlistCompletedDelegate == null)) {
                this.onGetUserlistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserlistCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserlistDelegate, new object[] {
                        username}, this.onEndGetUserlistDelegate, this.onGetUserlistCompletedDelegate, userState);
        }
        
        public string GetRelation(string meetingname, string siteurl) {
            return base.Channel.GetRelation(meetingname, siteurl);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetRelation(string meetingname, string siteurl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRelation(meetingname, siteurl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetRelation(System.IAsyncResult result) {
            return base.Channel.EndGetRelation(result);
        }
        
        private System.IAsyncResult OnBeginGetRelation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string meetingname = ((string)(inValues[0]));
            string siteurl = ((string)(inValues[1]));
            return this.BeginGetRelation(meetingname, siteurl, callback, asyncState);
        }
        
        private object[] OnEndGetRelation(System.IAsyncResult result) {
            string retVal = this.EndGetRelation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRelationCompleted(object state) {
            if ((this.GetRelationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRelationCompleted(this, new GetRelationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRelationAsync(string meetingname, string siteurl) {
            this.GetRelationAsync(meetingname, siteurl, null);
        }
        
        public void GetRelationAsync(string meetingname, string siteurl, object userState) {
            if ((this.onBeginGetRelationDelegate == null)) {
                this.onBeginGetRelationDelegate = new BeginOperationDelegate(this.OnBeginGetRelation);
            }
            if ((this.onEndGetRelationDelegate == null)) {
                this.onEndGetRelationDelegate = new EndOperationDelegate(this.OnEndGetRelation);
            }
            if ((this.onGetRelationCompletedDelegate == null)) {
                this.onGetRelationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRelationCompleted);
            }
            base.InvokeAsync(this.onBeginGetRelationDelegate, new object[] {
                        meetingname,
                        siteurl}, this.onEndGetRelationDelegate, this.onGetRelationCompletedDelegate, userState);
        }
        
        public string TestSharepoint(string LoginName, int listItemId) {
            return base.Channel.TestSharepoint(LoginName, listItemId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginTestSharepoint(string LoginName, int listItemId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTestSharepoint(LoginName, listItemId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndTestSharepoint(System.IAsyncResult result) {
            return base.Channel.EndTestSharepoint(result);
        }
        
        private System.IAsyncResult OnBeginTestSharepoint(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string LoginName = ((string)(inValues[0]));
            int listItemId = ((int)(inValues[1]));
            return this.BeginTestSharepoint(LoginName, listItemId, callback, asyncState);
        }
        
        private object[] OnEndTestSharepoint(System.IAsyncResult result) {
            string retVal = this.EndTestSharepoint(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestSharepointCompleted(object state) {
            if ((this.TestSharepointCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestSharepointCompleted(this, new TestSharepointCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestSharepointAsync(string LoginName, int listItemId) {
            this.TestSharepointAsync(LoginName, listItemId, null);
        }
        
        public void TestSharepointAsync(string LoginName, int listItemId, object userState) {
            if ((this.onBeginTestSharepointDelegate == null)) {
                this.onBeginTestSharepointDelegate = new BeginOperationDelegate(this.OnBeginTestSharepoint);
            }
            if ((this.onEndTestSharepointDelegate == null)) {
                this.onEndTestSharepointDelegate = new EndOperationDelegate(this.OnEndTestSharepoint);
            }
            if ((this.onTestSharepointCompletedDelegate == null)) {
                this.onTestSharepointCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestSharepointCompleted);
            }
            base.InvokeAsync(this.onBeginTestSharepointDelegate, new object[] {
                        LoginName,
                        listItemId}, this.onEndTestSharepointDelegate, this.onTestSharepointCompletedDelegate, userState);
        }
        
        public byte[] GetDownLodeFile(string weburl, string document, string siteurl, string LoginName) {
            return base.Channel.GetDownLodeFile(weburl, document, siteurl, LoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetDownLodeFile(string weburl, string document, string siteurl, string LoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDownLodeFile(weburl, document, siteurl, LoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public byte[] EndGetDownLodeFile(System.IAsyncResult result) {
            return base.Channel.EndGetDownLodeFile(result);
        }
        
        private System.IAsyncResult OnBeginGetDownLodeFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string weburl = ((string)(inValues[0]));
            string document = ((string)(inValues[1]));
            string siteurl = ((string)(inValues[2]));
            string LoginName = ((string)(inValues[3]));
            return this.BeginGetDownLodeFile(weburl, document, siteurl, LoginName, callback, asyncState);
        }
        
        private object[] OnEndGetDownLodeFile(System.IAsyncResult result) {
            byte[] retVal = this.EndGetDownLodeFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDownLodeFileCompleted(object state) {
            if ((this.GetDownLodeFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDownLodeFileCompleted(this, new GetDownLodeFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDownLodeFileAsync(string weburl, string document, string siteurl, string LoginName) {
            this.GetDownLodeFileAsync(weburl, document, siteurl, LoginName, null);
        }
        
        public void GetDownLodeFileAsync(string weburl, string document, string siteurl, string LoginName, object userState) {
            if ((this.onBeginGetDownLodeFileDelegate == null)) {
                this.onBeginGetDownLodeFileDelegate = new BeginOperationDelegate(this.OnBeginGetDownLodeFile);
            }
            if ((this.onEndGetDownLodeFileDelegate == null)) {
                this.onEndGetDownLodeFileDelegate = new EndOperationDelegate(this.OnEndGetDownLodeFile);
            }
            if ((this.onGetDownLodeFileCompletedDelegate == null)) {
                this.onGetDownLodeFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDownLodeFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetDownLodeFileDelegate, new object[] {
                        weburl,
                        document,
                        siteurl,
                        LoginName}, this.onEndGetDownLodeFileDelegate, this.onGetDownLodeFileCompletedDelegate, userState);
        }
        
        public bool FileUpload(string WebUrl, string FileName, byte[] FileBytes, string PFolderUrl, string siteurl, string LoginName) {
            return base.Channel.FileUpload(WebUrl, FileName, FileBytes, PFolderUrl, siteurl, LoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFileUpload(string WebUrl, string FileName, byte[] FileBytes, string PFolderUrl, string siteurl, string LoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileUpload(WebUrl, FileName, FileBytes, PFolderUrl, siteurl, LoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndFileUpload(System.IAsyncResult result) {
            return base.Channel.EndFileUpload(result);
        }
        
        private System.IAsyncResult OnBeginFileUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string WebUrl = ((string)(inValues[0]));
            string FileName = ((string)(inValues[1]));
            byte[] FileBytes = ((byte[])(inValues[2]));
            string PFolderUrl = ((string)(inValues[3]));
            string siteurl = ((string)(inValues[4]));
            string LoginName = ((string)(inValues[5]));
            return this.BeginFileUpload(WebUrl, FileName, FileBytes, PFolderUrl, siteurl, LoginName, callback, asyncState);
        }
        
        private object[] OnEndFileUpload(System.IAsyncResult result) {
            bool retVal = this.EndFileUpload(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileUploadCompleted(object state) {
            if ((this.FileUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileUploadCompleted(this, new FileUploadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileUploadAsync(string WebUrl, string FileName, byte[] FileBytes, string PFolderUrl, string siteurl, string LoginName) {
            this.FileUploadAsync(WebUrl, FileName, FileBytes, PFolderUrl, siteurl, LoginName, null);
        }
        
        public void FileUploadAsync(string WebUrl, string FileName, byte[] FileBytes, string PFolderUrl, string siteurl, string LoginName, object userState) {
            if ((this.onBeginFileUploadDelegate == null)) {
                this.onBeginFileUploadDelegate = new BeginOperationDelegate(this.OnBeginFileUpload);
            }
            if ((this.onEndFileUploadDelegate == null)) {
                this.onEndFileUploadDelegate = new EndOperationDelegate(this.OnEndFileUpload);
            }
            if ((this.onFileUploadCompletedDelegate == null)) {
                this.onFileUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileUploadCompleted);
            }
            base.InvokeAsync(this.onBeginFileUploadDelegate, new object[] {
                        WebUrl,
                        FileName,
                        FileBytes,
                        PFolderUrl,
                        siteurl,
                        LoginName}, this.onEndFileUploadDelegate, this.onFileUploadCompletedDelegate, userState);
        }
        
        public string GetOrderInfo(string WebUrl, string siteurl, string StartTime, string EndTime, string State) {
            return base.Channel.GetOrderInfo(WebUrl, siteurl, StartTime, EndTime, State);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetOrderInfo(string WebUrl, string siteurl, string StartTime, string EndTime, string State, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOrderInfo(WebUrl, siteurl, StartTime, EndTime, State, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetOrderInfo(System.IAsyncResult result) {
            return base.Channel.EndGetOrderInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetOrderInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string WebUrl = ((string)(inValues[0]));
            string siteurl = ((string)(inValues[1]));
            string StartTime = ((string)(inValues[2]));
            string EndTime = ((string)(inValues[3]));
            string State = ((string)(inValues[4]));
            return this.BeginGetOrderInfo(WebUrl, siteurl, StartTime, EndTime, State, callback, asyncState);
        }
        
        private object[] OnEndGetOrderInfo(System.IAsyncResult result) {
            string retVal = this.EndGetOrderInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOrderInfoCompleted(object state) {
            if ((this.GetOrderInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOrderInfoCompleted(this, new GetOrderInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOrderInfoAsync(string WebUrl, string siteurl, string StartTime, string EndTime, string State) {
            this.GetOrderInfoAsync(WebUrl, siteurl, StartTime, EndTime, State, null);
        }
        
        public void GetOrderInfoAsync(string WebUrl, string siteurl, string StartTime, string EndTime, string State, object userState) {
            if ((this.onBeginGetOrderInfoDelegate == null)) {
                this.onBeginGetOrderInfoDelegate = new BeginOperationDelegate(this.OnBeginGetOrderInfo);
            }
            if ((this.onEndGetOrderInfoDelegate == null)) {
                this.onEndGetOrderInfoDelegate = new EndOperationDelegate(this.OnEndGetOrderInfo);
            }
            if ((this.onGetOrderInfoCompletedDelegate == null)) {
                this.onGetOrderInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOrderInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetOrderInfoDelegate, new object[] {
                        WebUrl,
                        siteurl,
                        StartTime,
                        EndTime,
                        State}, this.onEndGetOrderInfoDelegate, this.onGetOrderInfoCompletedDelegate, userState);
        }
        
        public string GetMeetInfoNow() {
            return base.Channel.GetMeetInfoNow();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMeetInfoNow(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeetInfoNow(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMeetInfoNow(System.IAsyncResult result) {
            return base.Channel.EndGetMeetInfoNow(result);
        }
        
        private System.IAsyncResult OnBeginGetMeetInfoNow(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetMeetInfoNow(callback, asyncState);
        }
        
        private object[] OnEndGetMeetInfoNow(System.IAsyncResult result) {
            string retVal = this.EndGetMeetInfoNow(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeetInfoNowCompleted(object state) {
            if ((this.GetMeetInfoNowCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeetInfoNowCompleted(this, new GetMeetInfoNowCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeetInfoNowAsync() {
            this.GetMeetInfoNowAsync(null);
        }
        
        public void GetMeetInfoNowAsync(object userState) {
            if ((this.onBeginGetMeetInfoNowDelegate == null)) {
                this.onBeginGetMeetInfoNowDelegate = new BeginOperationDelegate(this.OnBeginGetMeetInfoNow);
            }
            if ((this.onEndGetMeetInfoNowDelegate == null)) {
                this.onEndGetMeetInfoNowDelegate = new EndOperationDelegate(this.OnEndGetMeetInfoNow);
            }
            if ((this.onGetMeetInfoNowCompletedDelegate == null)) {
                this.onGetMeetInfoNowCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeetInfoNowCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeetInfoNowDelegate, null, this.onEndGetMeetInfoNowDelegate, this.onGetMeetInfoNowCompletedDelegate, userState);
        }
        
        public string GetMeetInfo(string weburl, string document, string siteurl, string LoginName) {
            return base.Channel.GetMeetInfo(weburl, document, siteurl, LoginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMeetInfo(string weburl, string document, string siteurl, string LoginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMeetInfo(weburl, document, siteurl, LoginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMeetInfo(System.IAsyncResult result) {
            return base.Channel.EndGetMeetInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetMeetInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string weburl = ((string)(inValues[0]));
            string document = ((string)(inValues[1]));
            string siteurl = ((string)(inValues[2]));
            string LoginName = ((string)(inValues[3]));
            return this.BeginGetMeetInfo(weburl, document, siteurl, LoginName, callback, asyncState);
        }
        
        private object[] OnEndGetMeetInfo(System.IAsyncResult result) {
            string retVal = this.EndGetMeetInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMeetInfoCompleted(object state) {
            if ((this.GetMeetInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMeetInfoCompleted(this, new GetMeetInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMeetInfoAsync(string weburl, string document, string siteurl, string LoginName) {
            this.GetMeetInfoAsync(weburl, document, siteurl, LoginName, null);
        }
        
        public void GetMeetInfoAsync(string weburl, string document, string siteurl, string LoginName, object userState) {
            if ((this.onBeginGetMeetInfoDelegate == null)) {
                this.onBeginGetMeetInfoDelegate = new BeginOperationDelegate(this.OnBeginGetMeetInfo);
            }
            if ((this.onEndGetMeetInfoDelegate == null)) {
                this.onEndGetMeetInfoDelegate = new EndOperationDelegate(this.OnEndGetMeetInfo);
            }
            if ((this.onGetMeetInfoCompletedDelegate == null)) {
                this.onGetMeetInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMeetInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetMeetInfoDelegate, new object[] {
                        weburl,
                        document,
                        siteurl,
                        LoginName}, this.onEndGetMeetInfoDelegate, this.onGetMeetInfoCompletedDelegate, userState);
        }
    }
}
