//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceModel.ConferenceLyncConversationWebservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConferenceLyncConversationWebservice.ConferenceLyncConversationWebserviceSoap")]
    public interface ConferenceLyncConversationWebserviceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/JoinConferenceMainLyncConversation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void JoinConferenceMainLyncConversation(string conferenceName, ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/JoinConferenceMainLyncConversation", ReplyAction="*")]
        System.IAsyncResult BeginJoinConferenceMainLyncConversation(string conferenceName, ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity, System.AsyncCallback callback, object asyncState);
        
        void EndJoinConferenceMainLyncConversation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterBigScreen", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void InterBigScreen(string conferenceName, string sharer);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/InterBigScreen", ReplyAction="*")]
        System.IAsyncResult BeginInterBigScreen(string conferenceName, string sharer, System.AsyncCallback callback, object asyncState);
        
        void EndInterBigScreen(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/PPTControl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PPTControl(string conferenceName, string controler);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/PPTControl", ReplyAction="*")]
        System.IAsyncResult BeginPPTControl(string conferenceName, string controler, System.AsyncCallback callback, object asyncState);
        
        void EndPPTControl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ContainConversation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ContainConversation(string conferenceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ContainConversation", ReplyAction="*")]
        System.IAsyncResult BeginContainConversation(string conferenceName, System.AsyncCallback callback, object asyncState);
        
        string EndContainConversation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FillConversation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FillConversation(string conferenceName, string meetAddress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/FillConversation", ReplyAction="*")]
        System.IAsyncResult BeginFillConversation(string conferenceName, string meetAddress, System.AsyncCallback callback, object asyncState);
        
        void EndFillConversation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveConversation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemoveConversation(string conferenceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RemoveConversation", ReplyAction="*")]
        System.IAsyncResult BeginRemoveConversation(string conferenceName, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveConversation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LeaveConversation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LeaveConversation(string conferenceName, string contactUri);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/LeaveConversation", ReplyAction="*")]
        System.IAsyncResult BeginLeaveConversation(string conferenceName, string contactUri, System.AsyncCallback callback, object asyncState);
        
        void EndLeaveConversation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ForbiddenConversationInit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ForbiddenConversationInit(string conferenceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ForbiddenConversationInit", ReplyAction="*")]
        System.IAsyncResult BeginForbiddenConversationInit(string conferenceName, System.AsyncCallback callback, object asyncState);
        
        void EndForbiddenConversationInit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AllowConversationInit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void AllowConversationInit(string conferenceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/AllowConversationInit", ReplyAction="*")]
        System.IAsyncResult BeginAllowConversationInit(string conferenceName, System.AsyncCallback callback, object asyncState);
        
        void EndAllowConversationInit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckConversationInit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CheckConversationInit(string conferenceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CheckConversationInit", ReplyAction="*")]
        System.IAsyncResult BeginCheckConversationInit(string conferenceName, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckConversationInit(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class LyncConversationEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string jonConferencePersonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string JonConferencePerson {
            get {
                return this.jonConferencePersonField;
            }
            set {
                this.jonConferencePersonField = value;
                this.RaisePropertyChanged("JonConferencePerson");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ConferenceLyncConversationWebserviceSoapChannel : ConferenceModel.ConferenceLyncConversationWebservice.ConferenceLyncConversationWebserviceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContainConversationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ContainConversationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckConversationInitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckConversationInitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceLyncConversationWebserviceSoapClient : System.ServiceModel.ClientBase<ConferenceModel.ConferenceLyncConversationWebservice.ConferenceLyncConversationWebserviceSoap>, ConferenceModel.ConferenceLyncConversationWebservice.ConferenceLyncConversationWebserviceSoap {
        
        private BeginOperationDelegate onBeginJoinConferenceMainLyncConversationDelegate;
        
        private EndOperationDelegate onEndJoinConferenceMainLyncConversationDelegate;
        
        private System.Threading.SendOrPostCallback onJoinConferenceMainLyncConversationCompletedDelegate;
        
        private BeginOperationDelegate onBeginInterBigScreenDelegate;
        
        private EndOperationDelegate onEndInterBigScreenDelegate;
        
        private System.Threading.SendOrPostCallback onInterBigScreenCompletedDelegate;
        
        private BeginOperationDelegate onBeginPPTControlDelegate;
        
        private EndOperationDelegate onEndPPTControlDelegate;
        
        private System.Threading.SendOrPostCallback onPPTControlCompletedDelegate;
        
        private BeginOperationDelegate onBeginContainConversationDelegate;
        
        private EndOperationDelegate onEndContainConversationDelegate;
        
        private System.Threading.SendOrPostCallback onContainConversationCompletedDelegate;
        
        private BeginOperationDelegate onBeginFillConversationDelegate;
        
        private EndOperationDelegate onEndFillConversationDelegate;
        
        private System.Threading.SendOrPostCallback onFillConversationCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveConversationDelegate;
        
        private EndOperationDelegate onEndRemoveConversationDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveConversationCompletedDelegate;
        
        private BeginOperationDelegate onBeginLeaveConversationDelegate;
        
        private EndOperationDelegate onEndLeaveConversationDelegate;
        
        private System.Threading.SendOrPostCallback onLeaveConversationCompletedDelegate;
        
        private BeginOperationDelegate onBeginForbiddenConversationInitDelegate;
        
        private EndOperationDelegate onEndForbiddenConversationInitDelegate;
        
        private System.Threading.SendOrPostCallback onForbiddenConversationInitCompletedDelegate;
        
        private BeginOperationDelegate onBeginAllowConversationInitDelegate;
        
        private EndOperationDelegate onEndAllowConversationInitDelegate;
        
        private System.Threading.SendOrPostCallback onAllowConversationInitCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckConversationInitDelegate;
        
        private EndOperationDelegate onEndCheckConversationInitDelegate;
        
        private System.Threading.SendOrPostCallback onCheckConversationInitCompletedDelegate;
        
        public ConferenceLyncConversationWebserviceSoapClient() {
        }
        
        public ConferenceLyncConversationWebserviceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceLyncConversationWebserviceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceLyncConversationWebserviceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceLyncConversationWebserviceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> JoinConferenceMainLyncConversationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InterBigScreenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PPTControlCompleted;
        
        public event System.EventHandler<ContainConversationCompletedEventArgs> ContainConversationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FillConversationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveConversationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LeaveConversationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ForbiddenConversationInitCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AllowConversationInitCompleted;
        
        public event System.EventHandler<CheckConversationInitCompletedEventArgs> CheckConversationInitCompleted;
        
        public void JoinConferenceMainLyncConversation(string conferenceName, ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity) {
            base.Channel.JoinConferenceMainLyncConversation(conferenceName, lyncConversationEntity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginJoinConferenceMainLyncConversation(string conferenceName, ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginJoinConferenceMainLyncConversation(conferenceName, lyncConversationEntity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndJoinConferenceMainLyncConversation(System.IAsyncResult result) {
            base.Channel.EndJoinConferenceMainLyncConversation(result);
        }
        
        private System.IAsyncResult OnBeginJoinConferenceMainLyncConversation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity = ((ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity)(inValues[1]));
            return this.BeginJoinConferenceMainLyncConversation(conferenceName, lyncConversationEntity, callback, asyncState);
        }
        
        private object[] OnEndJoinConferenceMainLyncConversation(System.IAsyncResult result) {
            this.EndJoinConferenceMainLyncConversation(result);
            return null;
        }
        
        private void OnJoinConferenceMainLyncConversationCompleted(object state) {
            if ((this.JoinConferenceMainLyncConversationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.JoinConferenceMainLyncConversationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void JoinConferenceMainLyncConversationAsync(string conferenceName, ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity) {
            this.JoinConferenceMainLyncConversationAsync(conferenceName, lyncConversationEntity, null);
        }
        
        public void JoinConferenceMainLyncConversationAsync(string conferenceName, ConferenceModel.ConferenceLyncConversationWebservice.LyncConversationEntity lyncConversationEntity, object userState) {
            if ((this.onBeginJoinConferenceMainLyncConversationDelegate == null)) {
                this.onBeginJoinConferenceMainLyncConversationDelegate = new BeginOperationDelegate(this.OnBeginJoinConferenceMainLyncConversation);
            }
            if ((this.onEndJoinConferenceMainLyncConversationDelegate == null)) {
                this.onEndJoinConferenceMainLyncConversationDelegate = new EndOperationDelegate(this.OnEndJoinConferenceMainLyncConversation);
            }
            if ((this.onJoinConferenceMainLyncConversationCompletedDelegate == null)) {
                this.onJoinConferenceMainLyncConversationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnJoinConferenceMainLyncConversationCompleted);
            }
            base.InvokeAsync(this.onBeginJoinConferenceMainLyncConversationDelegate, new object[] {
                        conferenceName,
                        lyncConversationEntity}, this.onEndJoinConferenceMainLyncConversationDelegate, this.onJoinConferenceMainLyncConversationCompletedDelegate, userState);
        }
        
        public void InterBigScreen(string conferenceName, string sharer) {
            base.Channel.InterBigScreen(conferenceName, sharer);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInterBigScreen(string conferenceName, string sharer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInterBigScreen(conferenceName, sharer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndInterBigScreen(System.IAsyncResult result) {
            base.Channel.EndInterBigScreen(result);
        }
        
        private System.IAsyncResult OnBeginInterBigScreen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string sharer = ((string)(inValues[1]));
            return this.BeginInterBigScreen(conferenceName, sharer, callback, asyncState);
        }
        
        private object[] OnEndInterBigScreen(System.IAsyncResult result) {
            this.EndInterBigScreen(result);
            return null;
        }
        
        private void OnInterBigScreenCompleted(object state) {
            if ((this.InterBigScreenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InterBigScreenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InterBigScreenAsync(string conferenceName, string sharer) {
            this.InterBigScreenAsync(conferenceName, sharer, null);
        }
        
        public void InterBigScreenAsync(string conferenceName, string sharer, object userState) {
            if ((this.onBeginInterBigScreenDelegate == null)) {
                this.onBeginInterBigScreenDelegate = new BeginOperationDelegate(this.OnBeginInterBigScreen);
            }
            if ((this.onEndInterBigScreenDelegate == null)) {
                this.onEndInterBigScreenDelegate = new EndOperationDelegate(this.OnEndInterBigScreen);
            }
            if ((this.onInterBigScreenCompletedDelegate == null)) {
                this.onInterBigScreenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInterBigScreenCompleted);
            }
            base.InvokeAsync(this.onBeginInterBigScreenDelegate, new object[] {
                        conferenceName,
                        sharer}, this.onEndInterBigScreenDelegate, this.onInterBigScreenCompletedDelegate, userState);
        }
        
        public void PPTControl(string conferenceName, string controler) {
            base.Channel.PPTControl(conferenceName, controler);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPPTControl(string conferenceName, string controler, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPPTControl(conferenceName, controler, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPPTControl(System.IAsyncResult result) {
            base.Channel.EndPPTControl(result);
        }
        
        private System.IAsyncResult OnBeginPPTControl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string controler = ((string)(inValues[1]));
            return this.BeginPPTControl(conferenceName, controler, callback, asyncState);
        }
        
        private object[] OnEndPPTControl(System.IAsyncResult result) {
            this.EndPPTControl(result);
            return null;
        }
        
        private void OnPPTControlCompleted(object state) {
            if ((this.PPTControlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PPTControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PPTControlAsync(string conferenceName, string controler) {
            this.PPTControlAsync(conferenceName, controler, null);
        }
        
        public void PPTControlAsync(string conferenceName, string controler, object userState) {
            if ((this.onBeginPPTControlDelegate == null)) {
                this.onBeginPPTControlDelegate = new BeginOperationDelegate(this.OnBeginPPTControl);
            }
            if ((this.onEndPPTControlDelegate == null)) {
                this.onEndPPTControlDelegate = new EndOperationDelegate(this.OnEndPPTControl);
            }
            if ((this.onPPTControlCompletedDelegate == null)) {
                this.onPPTControlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPPTControlCompleted);
            }
            base.InvokeAsync(this.onBeginPPTControlDelegate, new object[] {
                        conferenceName,
                        controler}, this.onEndPPTControlDelegate, this.onPPTControlCompletedDelegate, userState);
        }
        
        public string ContainConversation(string conferenceName) {
            return base.Channel.ContainConversation(conferenceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginContainConversation(string conferenceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginContainConversation(conferenceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndContainConversation(System.IAsyncResult result) {
            return base.Channel.EndContainConversation(result);
        }
        
        private System.IAsyncResult OnBeginContainConversation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            return this.BeginContainConversation(conferenceName, callback, asyncState);
        }
        
        private object[] OnEndContainConversation(System.IAsyncResult result) {
            string retVal = this.EndContainConversation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnContainConversationCompleted(object state) {
            if ((this.ContainConversationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ContainConversationCompleted(this, new ContainConversationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ContainConversationAsync(string conferenceName) {
            this.ContainConversationAsync(conferenceName, null);
        }
        
        public void ContainConversationAsync(string conferenceName, object userState) {
            if ((this.onBeginContainConversationDelegate == null)) {
                this.onBeginContainConversationDelegate = new BeginOperationDelegate(this.OnBeginContainConversation);
            }
            if ((this.onEndContainConversationDelegate == null)) {
                this.onEndContainConversationDelegate = new EndOperationDelegate(this.OnEndContainConversation);
            }
            if ((this.onContainConversationCompletedDelegate == null)) {
                this.onContainConversationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnContainConversationCompleted);
            }
            base.InvokeAsync(this.onBeginContainConversationDelegate, new object[] {
                        conferenceName}, this.onEndContainConversationDelegate, this.onContainConversationCompletedDelegate, userState);
        }
        
        public void FillConversation(string conferenceName, string meetAddress) {
            base.Channel.FillConversation(conferenceName, meetAddress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFillConversation(string conferenceName, string meetAddress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFillConversation(conferenceName, meetAddress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndFillConversation(System.IAsyncResult result) {
            base.Channel.EndFillConversation(result);
        }
        
        private System.IAsyncResult OnBeginFillConversation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string meetAddress = ((string)(inValues[1]));
            return this.BeginFillConversation(conferenceName, meetAddress, callback, asyncState);
        }
        
        private object[] OnEndFillConversation(System.IAsyncResult result) {
            this.EndFillConversation(result);
            return null;
        }
        
        private void OnFillConversationCompleted(object state) {
            if ((this.FillConversationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FillConversationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FillConversationAsync(string conferenceName, string meetAddress) {
            this.FillConversationAsync(conferenceName, meetAddress, null);
        }
        
        public void FillConversationAsync(string conferenceName, string meetAddress, object userState) {
            if ((this.onBeginFillConversationDelegate == null)) {
                this.onBeginFillConversationDelegate = new BeginOperationDelegate(this.OnBeginFillConversation);
            }
            if ((this.onEndFillConversationDelegate == null)) {
                this.onEndFillConversationDelegate = new EndOperationDelegate(this.OnEndFillConversation);
            }
            if ((this.onFillConversationCompletedDelegate == null)) {
                this.onFillConversationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFillConversationCompleted);
            }
            base.InvokeAsync(this.onBeginFillConversationDelegate, new object[] {
                        conferenceName,
                        meetAddress}, this.onEndFillConversationDelegate, this.onFillConversationCompletedDelegate, userState);
        }
        
        public void RemoveConversation(string conferenceName) {
            base.Channel.RemoveConversation(conferenceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveConversation(string conferenceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveConversation(conferenceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveConversation(System.IAsyncResult result) {
            base.Channel.EndRemoveConversation(result);
        }
        
        private System.IAsyncResult OnBeginRemoveConversation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            return this.BeginRemoveConversation(conferenceName, callback, asyncState);
        }
        
        private object[] OnEndRemoveConversation(System.IAsyncResult result) {
            this.EndRemoveConversation(result);
            return null;
        }
        
        private void OnRemoveConversationCompleted(object state) {
            if ((this.RemoveConversationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveConversationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveConversationAsync(string conferenceName) {
            this.RemoveConversationAsync(conferenceName, null);
        }
        
        public void RemoveConversationAsync(string conferenceName, object userState) {
            if ((this.onBeginRemoveConversationDelegate == null)) {
                this.onBeginRemoveConversationDelegate = new BeginOperationDelegate(this.OnBeginRemoveConversation);
            }
            if ((this.onEndRemoveConversationDelegate == null)) {
                this.onEndRemoveConversationDelegate = new EndOperationDelegate(this.OnEndRemoveConversation);
            }
            if ((this.onRemoveConversationCompletedDelegate == null)) {
                this.onRemoveConversationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveConversationCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveConversationDelegate, new object[] {
                        conferenceName}, this.onEndRemoveConversationDelegate, this.onRemoveConversationCompletedDelegate, userState);
        }
        
        public void LeaveConversation(string conferenceName, string contactUri) {
            base.Channel.LeaveConversation(conferenceName, contactUri);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLeaveConversation(string conferenceName, string contactUri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLeaveConversation(conferenceName, contactUri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLeaveConversation(System.IAsyncResult result) {
            base.Channel.EndLeaveConversation(result);
        }
        
        private System.IAsyncResult OnBeginLeaveConversation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string contactUri = ((string)(inValues[1]));
            return this.BeginLeaveConversation(conferenceName, contactUri, callback, asyncState);
        }
        
        private object[] OnEndLeaveConversation(System.IAsyncResult result) {
            this.EndLeaveConversation(result);
            return null;
        }
        
        private void OnLeaveConversationCompleted(object state) {
            if ((this.LeaveConversationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LeaveConversationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LeaveConversationAsync(string conferenceName, string contactUri) {
            this.LeaveConversationAsync(conferenceName, contactUri, null);
        }
        
        public void LeaveConversationAsync(string conferenceName, string contactUri, object userState) {
            if ((this.onBeginLeaveConversationDelegate == null)) {
                this.onBeginLeaveConversationDelegate = new BeginOperationDelegate(this.OnBeginLeaveConversation);
            }
            if ((this.onEndLeaveConversationDelegate == null)) {
                this.onEndLeaveConversationDelegate = new EndOperationDelegate(this.OnEndLeaveConversation);
            }
            if ((this.onLeaveConversationCompletedDelegate == null)) {
                this.onLeaveConversationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLeaveConversationCompleted);
            }
            base.InvokeAsync(this.onBeginLeaveConversationDelegate, new object[] {
                        conferenceName,
                        contactUri}, this.onEndLeaveConversationDelegate, this.onLeaveConversationCompletedDelegate, userState);
        }
        
        public void ForbiddenConversationInit(string conferenceName) {
            base.Channel.ForbiddenConversationInit(conferenceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginForbiddenConversationInit(string conferenceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginForbiddenConversationInit(conferenceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndForbiddenConversationInit(System.IAsyncResult result) {
            base.Channel.EndForbiddenConversationInit(result);
        }
        
        private System.IAsyncResult OnBeginForbiddenConversationInit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            return this.BeginForbiddenConversationInit(conferenceName, callback, asyncState);
        }
        
        private object[] OnEndForbiddenConversationInit(System.IAsyncResult result) {
            this.EndForbiddenConversationInit(result);
            return null;
        }
        
        private void OnForbiddenConversationInitCompleted(object state) {
            if ((this.ForbiddenConversationInitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ForbiddenConversationInitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ForbiddenConversationInitAsync(string conferenceName) {
            this.ForbiddenConversationInitAsync(conferenceName, null);
        }
        
        public void ForbiddenConversationInitAsync(string conferenceName, object userState) {
            if ((this.onBeginForbiddenConversationInitDelegate == null)) {
                this.onBeginForbiddenConversationInitDelegate = new BeginOperationDelegate(this.OnBeginForbiddenConversationInit);
            }
            if ((this.onEndForbiddenConversationInitDelegate == null)) {
                this.onEndForbiddenConversationInitDelegate = new EndOperationDelegate(this.OnEndForbiddenConversationInit);
            }
            if ((this.onForbiddenConversationInitCompletedDelegate == null)) {
                this.onForbiddenConversationInitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnForbiddenConversationInitCompleted);
            }
            base.InvokeAsync(this.onBeginForbiddenConversationInitDelegate, new object[] {
                        conferenceName}, this.onEndForbiddenConversationInitDelegate, this.onForbiddenConversationInitCompletedDelegate, userState);
        }
        
        public void AllowConversationInit(string conferenceName) {
            base.Channel.AllowConversationInit(conferenceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAllowConversationInit(string conferenceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAllowConversationInit(conferenceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAllowConversationInit(System.IAsyncResult result) {
            base.Channel.EndAllowConversationInit(result);
        }
        
        private System.IAsyncResult OnBeginAllowConversationInit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            return this.BeginAllowConversationInit(conferenceName, callback, asyncState);
        }
        
        private object[] OnEndAllowConversationInit(System.IAsyncResult result) {
            this.EndAllowConversationInit(result);
            return null;
        }
        
        private void OnAllowConversationInitCompleted(object state) {
            if ((this.AllowConversationInitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AllowConversationInitCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AllowConversationInitAsync(string conferenceName) {
            this.AllowConversationInitAsync(conferenceName, null);
        }
        
        public void AllowConversationInitAsync(string conferenceName, object userState) {
            if ((this.onBeginAllowConversationInitDelegate == null)) {
                this.onBeginAllowConversationInitDelegate = new BeginOperationDelegate(this.OnBeginAllowConversationInit);
            }
            if ((this.onEndAllowConversationInitDelegate == null)) {
                this.onEndAllowConversationInitDelegate = new EndOperationDelegate(this.OnEndAllowConversationInit);
            }
            if ((this.onAllowConversationInitCompletedDelegate == null)) {
                this.onAllowConversationInitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAllowConversationInitCompleted);
            }
            base.InvokeAsync(this.onBeginAllowConversationInitDelegate, new object[] {
                        conferenceName}, this.onEndAllowConversationInitDelegate, this.onAllowConversationInitCompletedDelegate, userState);
        }
        
        public bool CheckConversationInit(string conferenceName) {
            return base.Channel.CheckConversationInit(conferenceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckConversationInit(string conferenceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckConversationInit(conferenceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckConversationInit(System.IAsyncResult result) {
            return base.Channel.EndCheckConversationInit(result);
        }
        
        private System.IAsyncResult OnBeginCheckConversationInit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            return this.BeginCheckConversationInit(conferenceName, callback, asyncState);
        }
        
        private object[] OnEndCheckConversationInit(System.IAsyncResult result) {
            bool retVal = this.EndCheckConversationInit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckConversationInitCompleted(object state) {
            if ((this.CheckConversationInitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckConversationInitCompleted(this, new CheckConversationInitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckConversationInitAsync(string conferenceName) {
            this.CheckConversationInitAsync(conferenceName, null);
        }
        
        public void CheckConversationInitAsync(string conferenceName, object userState) {
            if ((this.onBeginCheckConversationInitDelegate == null)) {
                this.onBeginCheckConversationInitDelegate = new BeginOperationDelegate(this.OnBeginCheckConversationInit);
            }
            if ((this.onEndCheckConversationInitDelegate == null)) {
                this.onEndCheckConversationInitDelegate = new EndOperationDelegate(this.OnEndCheckConversationInit);
            }
            if ((this.onCheckConversationInitCompletedDelegate == null)) {
                this.onCheckConversationInitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckConversationInitCompleted);
            }
            base.InvokeAsync(this.onBeginCheckConversationInitDelegate, new object[] {
                        conferenceName}, this.onEndCheckConversationInitDelegate, this.onCheckConversationInitCompletedDelegate, userState);
        }
    }
}
