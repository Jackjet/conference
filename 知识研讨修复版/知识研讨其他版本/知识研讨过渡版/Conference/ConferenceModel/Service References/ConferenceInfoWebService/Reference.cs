//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceModel.ConferenceInfoWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConferenceInfoWebService.ConferenceInfoWebServiceSoap")]
    public interface ConferenceInfoWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetClientConfigInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ConferenceModel.ConferenceInfoWebService.ClientConfigEntity GetClientConfigInformation();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetClientConfigInformation", ReplyAction="*")]
        System.IAsyncResult BeginGetClientConfigInformation(System.AsyncCallback callback, object asyncState);
        
        ConferenceModel.ConferenceInfoWebService.ClientConfigEntity EndGetClientConfigInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetTempInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[] GetTempInformation();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetTempInformation", ReplyAction="*")]
        System.IAsyncResult BeginGetTempInformation(System.AsyncCallback callback, object asyncState);
        
        ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[] EndGetTempInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClearTempConfig", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ClearTempConfig(int type);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ClearTempConfig", ReplyAction="*")]
        System.IAsyncResult BeginClearTempConfig(int type, System.AsyncCallback callback, object asyncState);
        
        void EndClearTempConfig(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateTempInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void UpdateTempInformation(string conferenceName, bool isSimpleModel, bool isEducationModel);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/UpdateTempInformation", ReplyAction="*")]
        System.IAsyncResult BeginUpdateTempInformation(string conferenceName, bool isSimpleModel, bool isEducationModel, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateTempInformation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClientControl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ClientControl(string conferenceName, string commander, ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ClientControl", ReplyAction="*")]
        System.IAsyncResult BeginClientControl(string conferenceName, string commander, ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType, System.AsyncCallback callback, object asyncState);
        
        void EndClientControl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RunServerSocket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        ConferenceModel.ConferenceInfoWebService.PortTypeEntity RunServerSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RunServerSocket", ReplyAction="*")]
        System.IAsyncResult BeginRunServerSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, System.AsyncCallback callback, object asyncState);
        
        ConferenceModel.ConferenceInfoWebService.PortTypeEntity EndRunServerSocket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FillSyncServiceData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void FillSyncServiceData(string conferenceName, string sharer, ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/FillSyncServiceData", ReplyAction="*")]
        System.IAsyncResult BeginFillSyncServiceData(string conferenceName, string sharer, ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType, System.AsyncCallback callback, object asyncState);
        
        void EndFillSyncServiceData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetKeepAlive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool SetKeepAlive();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/SetKeepAlive", ReplyAction="*")]
        System.IAsyncResult BeginSetKeepAlive(System.AsyncCallback callback, object asyncState);
        
        bool EndSetKeepAlive(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveClientSocket", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemoveClientSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, string contactUrl);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RemoveClientSocket", ReplyAction="*")]
        System.IAsyncResult BeginRemoveClientSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, string contactUrl, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveClientSocket(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveAllClientSocketBySomeOne", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void RemoveAllClientSocketBySomeOne(string conferenceName, string contactUrl);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RemoveAllClientSocketBySomeOne", ReplyAction="*")]
        System.IAsyncResult BeginRemoveAllClientSocketBySomeOne(string conferenceName, string contactUrl, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveAllClientSocketBySomeOne(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckUserIsOnline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CheckUserIsOnline(string Uri);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/CheckUserIsOnline", ReplyAction="*")]
        System.IAsyncResult BeginCheckUserIsOnline(string Uri, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckUserIsOnline(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ClientHelper", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void ClientHelper(ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ClientHelper", ReplyAction="*")]
        System.IAsyncResult BeginClientHelper(ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity, System.AsyncCallback callback, object asyncState);
        
        void EndClientHelper(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetConferenceInfoByMobile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetConferenceInfoByMobile(string loginName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetConferenceInfoByMobile", ReplyAction="*")]
        System.IAsyncResult BeginGetConferenceInfoByMobile(string loginName, System.AsyncCallback callback, object asyncState);
        
        string EndGetConferenceInfoByMobile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RemoveClientSocketByIMM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RemoveClientSocketByIMM(string conferenceName, string contactUrl);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/RemoveClientSocketByIMM", ReplyAction="*")]
        System.IAsyncResult BeginRemoveClientSocketByIMM(string conferenceName, string contactUrl, System.AsyncCallback callback, object asyncState);
        
        string EndRemoveClientSocketByIMM(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetIMMServerPort", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetIMMServerPort(string conferenceName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetIMMServerPort", ReplyAction="*")]
        System.IAsyncResult BeginGetIMMServerPort(string conferenceName, System.AsyncCallback callback, object asyncState);
        
        string EndGetIMMServerPort(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ClientConfigEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string dNS1Field;
        
        private string dNS2Field;
        
        private string lyncNameField;
        
        private string certificationField;
        
        private string certificationSerialField;
        
        private string userDomainField;
        
        private string userDoaminPart1NameField;
        
        private string lyncIP1Field;
        
        private string lyncIP2Field;
        
        private string sPSiteAddressFrontField;
        
        private string treeXmlFileNameField;
        
        private string treeJpgFileNameField;
        
        private string meetingFolderNameField;
        
        private string pesonalFolderNameField;
        
        private string spaceWebSiteUriField;
        
        private string screenResulotionWidthField;
        
        private string screenResulotionHeightField;
        
        private string localPersonalNoteFileField;
        
        private string conferenceFtpWebAddressFrontField;
        
        private string ftpServerceAudioNameField;
        
        private string ftpServercePersonImgNameField;
        
        private string treeItemEmptyNameField;
        
        private string recordFolderNameField;
        
        private string recordExtentionField;
        
        private string reacordUploadFileNameField;
        
        private string keyboardSettingFile_64Field;
        
        private string keyboardSettingFile_32Field;
        
        private string ftpUserNameField;
        
        private string ftpPasswordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string DNS1 {
            get {
                return this.dNS1Field;
            }
            set {
                this.dNS1Field = value;
                this.RaisePropertyChanged("DNS1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string DNS2 {
            get {
                return this.dNS2Field;
            }
            set {
                this.dNS2Field = value;
                this.RaisePropertyChanged("DNS2");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string LyncName {
            get {
                return this.lyncNameField;
            }
            set {
                this.lyncNameField = value;
                this.RaisePropertyChanged("LyncName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Certification {
            get {
                return this.certificationField;
            }
            set {
                this.certificationField = value;
                this.RaisePropertyChanged("Certification");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string CertificationSerial {
            get {
                return this.certificationSerialField;
            }
            set {
                this.certificationSerialField = value;
                this.RaisePropertyChanged("CertificationSerial");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string UserDomain {
            get {
                return this.userDomainField;
            }
            set {
                this.userDomainField = value;
                this.RaisePropertyChanged("UserDomain");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string UserDoaminPart1Name {
            get {
                return this.userDoaminPart1NameField;
            }
            set {
                this.userDoaminPart1NameField = value;
                this.RaisePropertyChanged("UserDoaminPart1Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string LyncIP1 {
            get {
                return this.lyncIP1Field;
            }
            set {
                this.lyncIP1Field = value;
                this.RaisePropertyChanged("LyncIP1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string LyncIP2 {
            get {
                return this.lyncIP2Field;
            }
            set {
                this.lyncIP2Field = value;
                this.RaisePropertyChanged("LyncIP2");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string SPSiteAddressFront {
            get {
                return this.sPSiteAddressFrontField;
            }
            set {
                this.sPSiteAddressFrontField = value;
                this.RaisePropertyChanged("SPSiteAddressFront");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string TreeXmlFileName {
            get {
                return this.treeXmlFileNameField;
            }
            set {
                this.treeXmlFileNameField = value;
                this.RaisePropertyChanged("TreeXmlFileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string TreeJpgFileName {
            get {
                return this.treeJpgFileNameField;
            }
            set {
                this.treeJpgFileNameField = value;
                this.RaisePropertyChanged("TreeJpgFileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string MeetingFolderName {
            get {
                return this.meetingFolderNameField;
            }
            set {
                this.meetingFolderNameField = value;
                this.RaisePropertyChanged("MeetingFolderName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string PesonalFolderName {
            get {
                return this.pesonalFolderNameField;
            }
            set {
                this.pesonalFolderNameField = value;
                this.RaisePropertyChanged("PesonalFolderName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string SpaceWebSiteUri {
            get {
                return this.spaceWebSiteUriField;
            }
            set {
                this.spaceWebSiteUriField = value;
                this.RaisePropertyChanged("SpaceWebSiteUri");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string ScreenResulotionWidth {
            get {
                return this.screenResulotionWidthField;
            }
            set {
                this.screenResulotionWidthField = value;
                this.RaisePropertyChanged("ScreenResulotionWidth");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public string ScreenResulotionHeight {
            get {
                return this.screenResulotionHeightField;
            }
            set {
                this.screenResulotionHeightField = value;
                this.RaisePropertyChanged("ScreenResulotionHeight");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public string LocalPersonalNoteFile {
            get {
                return this.localPersonalNoteFileField;
            }
            set {
                this.localPersonalNoteFileField = value;
                this.RaisePropertyChanged("LocalPersonalNoteFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public string ConferenceFtpWebAddressFront {
            get {
                return this.conferenceFtpWebAddressFrontField;
            }
            set {
                this.conferenceFtpWebAddressFrontField = value;
                this.RaisePropertyChanged("ConferenceFtpWebAddressFront");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public string FtpServerceAudioName {
            get {
                return this.ftpServerceAudioNameField;
            }
            set {
                this.ftpServerceAudioNameField = value;
                this.RaisePropertyChanged("FtpServerceAudioName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string FtpServercePersonImgName {
            get {
                return this.ftpServercePersonImgNameField;
            }
            set {
                this.ftpServercePersonImgNameField = value;
                this.RaisePropertyChanged("FtpServercePersonImgName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string TreeItemEmptyName {
            get {
                return this.treeItemEmptyNameField;
            }
            set {
                this.treeItemEmptyNameField = value;
                this.RaisePropertyChanged("TreeItemEmptyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public string RecordFolderName {
            get {
                return this.recordFolderNameField;
            }
            set {
                this.recordFolderNameField = value;
                this.RaisePropertyChanged("RecordFolderName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=23)]
        public string RecordExtention {
            get {
                return this.recordExtentionField;
            }
            set {
                this.recordExtentionField = value;
                this.RaisePropertyChanged("RecordExtention");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=24)]
        public string ReacordUploadFileName {
            get {
                return this.reacordUploadFileNameField;
            }
            set {
                this.reacordUploadFileNameField = value;
                this.RaisePropertyChanged("ReacordUploadFileName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=25)]
        public string KeyboardSettingFile_64 {
            get {
                return this.keyboardSettingFile_64Field;
            }
            set {
                this.keyboardSettingFile_64Field = value;
                this.RaisePropertyChanged("KeyboardSettingFile_64");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=26)]
        public string KeyboardSettingFile_32 {
            get {
                return this.keyboardSettingFile_32Field;
            }
            set {
                this.keyboardSettingFile_32Field = value;
                this.RaisePropertyChanged("KeyboardSettingFile_32");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=27)]
        public string FtpUserName {
            get {
                return this.ftpUserNameField;
            }
            set {
                this.ftpUserNameField = value;
                this.RaisePropertyChanged("FtpUserName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=28)]
        public string FtpPassword {
            get {
                return this.ftpPasswordField;
            }
            set {
                this.ftpPasswordField = value;
                this.RaisePropertyChanged("FtpPassword");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConferenceInfoEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sharerField;
        
        private ConferencePageType conferencePageTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Sharer {
            get {
                return this.sharerField;
            }
            set {
                this.sharerField = value;
                this.RaisePropertyChanged("Sharer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ConferencePageType ConferencePageType {
            get {
                return this.conferencePageTypeField;
            }
            set {
                this.conferencePageTypeField = value;
                this.RaisePropertyChanged("ConferencePageType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ConferencePageType {
        
        /// <remarks/>
        Meet,
        
        /// <remarks/>
        Tree,
        
        /// <remarks/>
        Space,
        
        /// <remarks/>
        Resource,
        
        /// <remarks/>
        IMM,
        
        /// <remarks/>
        PersonNote,
        
        /// <remarks/>
        MeetVote,
        
        /// <remarks/>
        U_Disk,
        
        /// <remarks/>
        Meet_Change,
        
        /// <remarks/>
        Chair,
        
        /// <remarks/>
        Studiom,
        
        /// <remarks/>
        SystemSetting,
        
        /// <remarks/>
        Tool,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class PortTypeEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ConferenceClientAcceptType conferenceClientAcceptTypeField;
        
        private int serverPointField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ConferenceClientAcceptType conferenceClientAcceptType {
            get {
                return this.conferenceClientAcceptTypeField;
            }
            set {
                this.conferenceClientAcceptTypeField = value;
                this.RaisePropertyChanged("conferenceClientAcceptType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int ServerPoint {
            get {
                return this.serverPointField;
            }
            set {
                this.serverPointField = value;
                this.RaisePropertyChanged("ServerPoint");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ConferenceClientAcceptType {
        
        /// <remarks/>
        ConferenceTree,
        
        /// <remarks/>
        ConferenceAudio,
        
        /// <remarks/>
        ConferenceFileSync,
        
        /// <remarks/>
        ConferenceSpaceSync,
        
        /// <remarks/>
        ConferenceInfoSync,
        
        /// <remarks/>
        LyncConversationSync,
        
        /// <remarks/>
        ConferenceMatrixSync,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConferenceInformationEntityPC : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int meetingIDField;
        
        private string meetingNameField;
        
        private string roomNameField;
        
        private string[] joinPeopleField;
        
        private string[] joinPeopleNameField;
        
        private System.DateTime beginTimeField;
        
        private System.DateTime endTimeField;
        
        private string applyPeopleField;
        
        private string pTaskNameField;
        
        private string sTaskNameField;
        
        private bool simpleModeField;
        
        private bool educationModeField;
        
        private string settingIpListField;
        
        private string webUriField;
        
        private string bigScreenNameField;
        
        private bool runCKOAPPField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int MeetingID {
            get {
                return this.meetingIDField;
            }
            set {
                this.meetingIDField = value;
                this.RaisePropertyChanged("MeetingID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string MeetingName {
            get {
                return this.meetingNameField;
            }
            set {
                this.meetingNameField = value;
                this.RaisePropertyChanged("MeetingName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string RoomName {
            get {
                return this.roomNameField;
            }
            set {
                this.roomNameField = value;
                this.RaisePropertyChanged("RoomName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        public string[] JoinPeople {
            get {
                return this.joinPeopleField;
            }
            set {
                this.joinPeopleField = value;
                this.RaisePropertyChanged("JoinPeople");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        public string[] JoinPeopleName {
            get {
                return this.joinPeopleNameField;
            }
            set {
                this.joinPeopleNameField = value;
                this.RaisePropertyChanged("JoinPeopleName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public System.DateTime BeginTime {
            get {
                return this.beginTimeField;
            }
            set {
                this.beginTimeField = value;
                this.RaisePropertyChanged("BeginTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime EndTime {
            get {
                return this.endTimeField;
            }
            set {
                this.endTimeField = value;
                this.RaisePropertyChanged("EndTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string ApplyPeople {
            get {
                return this.applyPeopleField;
            }
            set {
                this.applyPeopleField = value;
                this.RaisePropertyChanged("ApplyPeople");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string PTaskName {
            get {
                return this.pTaskNameField;
            }
            set {
                this.pTaskNameField = value;
                this.RaisePropertyChanged("PTaskName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string STaskName {
            get {
                return this.sTaskNameField;
            }
            set {
                this.sTaskNameField = value;
                this.RaisePropertyChanged("STaskName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool SimpleMode {
            get {
                return this.simpleModeField;
            }
            set {
                this.simpleModeField = value;
                this.RaisePropertyChanged("SimpleMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public bool EducationMode {
            get {
                return this.educationModeField;
            }
            set {
                this.educationModeField = value;
                this.RaisePropertyChanged("EducationMode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string SettingIpList {
            get {
                return this.settingIpListField;
            }
            set {
                this.settingIpListField = value;
                this.RaisePropertyChanged("SettingIpList");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string WebUri {
            get {
                return this.webUriField;
            }
            set {
                this.webUriField = value;
                this.RaisePropertyChanged("WebUri");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string BigScreenName {
            get {
                return this.bigScreenNameField;
            }
            set {
                this.bigScreenNameField = value;
                this.RaisePropertyChanged("BigScreenName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public bool RunCKOAPP {
            get {
                return this.runCKOAPPField;
            }
            set {
                this.runCKOAPPField = value;
                this.RaisePropertyChanged("RunCKOAPP");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ClientControlType {
        
        /// <remarks/>
        Close,
        
        /// <remarks/>
        VersionUpdate,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ConferenceInfoWebServiceSoapChannel : ConferenceModel.ConferenceInfoWebService.ConferenceInfoWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientConfigInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientConfigInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ConferenceModel.ConferenceInfoWebService.ClientConfigEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ConferenceModel.ConferenceInfoWebService.ClientConfigEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTempInformationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTempInformationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunServerSocketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunServerSocketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ConferenceModel.ConferenceInfoWebService.PortTypeEntity Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ConferenceModel.ConferenceInfoWebService.PortTypeEntity)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetKeepAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetKeepAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckUserIsOnlineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckUserIsOnlineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetConferenceInfoByMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConferenceInfoByMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveClientSocketByIMMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveClientSocketByIMMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetIMMServerPortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIMMServerPortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceInfoWebServiceSoapClient : System.ServiceModel.ClientBase<ConferenceModel.ConferenceInfoWebService.ConferenceInfoWebServiceSoap>, ConferenceModel.ConferenceInfoWebService.ConferenceInfoWebServiceSoap {
        
        private BeginOperationDelegate onBeginGetClientConfigInformationDelegate;
        
        private EndOperationDelegate onEndGetClientConfigInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientConfigInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTempInformationDelegate;
        
        private EndOperationDelegate onEndGetTempInformationDelegate;
        
        private System.Threading.SendOrPostCallback onGetTempInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginClearTempConfigDelegate;
        
        private EndOperationDelegate onEndClearTempConfigDelegate;
        
        private System.Threading.SendOrPostCallback onClearTempConfigCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateTempInformationDelegate;
        
        private EndOperationDelegate onEndUpdateTempInformationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateTempInformationCompletedDelegate;
        
        private BeginOperationDelegate onBeginClientControlDelegate;
        
        private EndOperationDelegate onEndClientControlDelegate;
        
        private System.Threading.SendOrPostCallback onClientControlCompletedDelegate;
        
        private BeginOperationDelegate onBeginRunServerSocketDelegate;
        
        private EndOperationDelegate onEndRunServerSocketDelegate;
        
        private System.Threading.SendOrPostCallback onRunServerSocketCompletedDelegate;
        
        private BeginOperationDelegate onBeginFillSyncServiceDataDelegate;
        
        private EndOperationDelegate onEndFillSyncServiceDataDelegate;
        
        private System.Threading.SendOrPostCallback onFillSyncServiceDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetKeepAliveDelegate;
        
        private EndOperationDelegate onEndSetKeepAliveDelegate;
        
        private System.Threading.SendOrPostCallback onSetKeepAliveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveClientSocketDelegate;
        
        private EndOperationDelegate onEndRemoveClientSocketDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveClientSocketCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveAllClientSocketBySomeOneDelegate;
        
        private EndOperationDelegate onEndRemoveAllClientSocketBySomeOneDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveAllClientSocketBySomeOneCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckUserIsOnlineDelegate;
        
        private EndOperationDelegate onEndCheckUserIsOnlineDelegate;
        
        private System.Threading.SendOrPostCallback onCheckUserIsOnlineCompletedDelegate;
        
        private BeginOperationDelegate onBeginClientHelperDelegate;
        
        private EndOperationDelegate onEndClientHelperDelegate;
        
        private System.Threading.SendOrPostCallback onClientHelperCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConferenceInfoByMobileDelegate;
        
        private EndOperationDelegate onEndGetConferenceInfoByMobileDelegate;
        
        private System.Threading.SendOrPostCallback onGetConferenceInfoByMobileCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveClientSocketByIMMDelegate;
        
        private EndOperationDelegate onEndRemoveClientSocketByIMMDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveClientSocketByIMMCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIMMServerPortDelegate;
        
        private EndOperationDelegate onEndGetIMMServerPortDelegate;
        
        private System.Threading.SendOrPostCallback onGetIMMServerPortCompletedDelegate;
        
        public ConferenceInfoWebServiceSoapClient() {
        }
        
        public ConferenceInfoWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceInfoWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceInfoWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceInfoWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetClientConfigInformationCompletedEventArgs> GetClientConfigInformationCompleted;
        
        public event System.EventHandler<GetTempInformationCompletedEventArgs> GetTempInformationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClearTempConfigCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateTempInformationCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClientControlCompleted;
        
        public event System.EventHandler<RunServerSocketCompletedEventArgs> RunServerSocketCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FillSyncServiceDataCompleted;
        
        public event System.EventHandler<SetKeepAliveCompletedEventArgs> SetKeepAliveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveClientSocketCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveAllClientSocketBySomeOneCompleted;
        
        public event System.EventHandler<CheckUserIsOnlineCompletedEventArgs> CheckUserIsOnlineCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClientHelperCompleted;
        
        public event System.EventHandler<GetConferenceInfoByMobileCompletedEventArgs> GetConferenceInfoByMobileCompleted;
        
        public event System.EventHandler<RemoveClientSocketByIMMCompletedEventArgs> RemoveClientSocketByIMMCompleted;
        
        public event System.EventHandler<GetIMMServerPortCompletedEventArgs> GetIMMServerPortCompleted;
        
        public ConferenceModel.ConferenceInfoWebService.ClientConfigEntity GetClientConfigInformation() {
            return base.Channel.GetClientConfigInformation();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetClientConfigInformation(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientConfigInformation(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ConferenceModel.ConferenceInfoWebService.ClientConfigEntity EndGetClientConfigInformation(System.IAsyncResult result) {
            return base.Channel.EndGetClientConfigInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetClientConfigInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetClientConfigInformation(callback, asyncState);
        }
        
        private object[] OnEndGetClientConfigInformation(System.IAsyncResult result) {
            ConferenceModel.ConferenceInfoWebService.ClientConfigEntity retVal = this.EndGetClientConfigInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientConfigInformationCompleted(object state) {
            if ((this.GetClientConfigInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientConfigInformationCompleted(this, new GetClientConfigInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientConfigInformationAsync() {
            this.GetClientConfigInformationAsync(null);
        }
        
        public void GetClientConfigInformationAsync(object userState) {
            if ((this.onBeginGetClientConfigInformationDelegate == null)) {
                this.onBeginGetClientConfigInformationDelegate = new BeginOperationDelegate(this.OnBeginGetClientConfigInformation);
            }
            if ((this.onEndGetClientConfigInformationDelegate == null)) {
                this.onEndGetClientConfigInformationDelegate = new EndOperationDelegate(this.OnEndGetClientConfigInformation);
            }
            if ((this.onGetClientConfigInformationCompletedDelegate == null)) {
                this.onGetClientConfigInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientConfigInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientConfigInformationDelegate, null, this.onEndGetClientConfigInformationDelegate, this.onGetClientConfigInformationCompletedDelegate, userState);
        }
        
        public ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[] GetTempInformation() {
            return base.Channel.GetTempInformation();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTempInformation(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTempInformation(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[] EndGetTempInformation(System.IAsyncResult result) {
            return base.Channel.EndGetTempInformation(result);
        }
        
        private System.IAsyncResult OnBeginGetTempInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTempInformation(callback, asyncState);
        }
        
        private object[] OnEndGetTempInformation(System.IAsyncResult result) {
            ConferenceModel.ConferenceInfoWebService.ConferenceInformationEntityPC[] retVal = this.EndGetTempInformation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTempInformationCompleted(object state) {
            if ((this.GetTempInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTempInformationCompleted(this, new GetTempInformationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTempInformationAsync() {
            this.GetTempInformationAsync(null);
        }
        
        public void GetTempInformationAsync(object userState) {
            if ((this.onBeginGetTempInformationDelegate == null)) {
                this.onBeginGetTempInformationDelegate = new BeginOperationDelegate(this.OnBeginGetTempInformation);
            }
            if ((this.onEndGetTempInformationDelegate == null)) {
                this.onEndGetTempInformationDelegate = new EndOperationDelegate(this.OnEndGetTempInformation);
            }
            if ((this.onGetTempInformationCompletedDelegate == null)) {
                this.onGetTempInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTempInformationCompleted);
            }
            base.InvokeAsync(this.onBeginGetTempInformationDelegate, null, this.onEndGetTempInformationDelegate, this.onGetTempInformationCompletedDelegate, userState);
        }
        
        public void ClearTempConfig(int type) {
            base.Channel.ClearTempConfig(type);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClearTempConfig(int type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClearTempConfig(type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndClearTempConfig(System.IAsyncResult result) {
            base.Channel.EndClearTempConfig(result);
        }
        
        private System.IAsyncResult OnBeginClearTempConfig(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int type = ((int)(inValues[0]));
            return this.BeginClearTempConfig(type, callback, asyncState);
        }
        
        private object[] OnEndClearTempConfig(System.IAsyncResult result) {
            this.EndClearTempConfig(result);
            return null;
        }
        
        private void OnClearTempConfigCompleted(object state) {
            if ((this.ClearTempConfigCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClearTempConfigCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClearTempConfigAsync(int type) {
            this.ClearTempConfigAsync(type, null);
        }
        
        public void ClearTempConfigAsync(int type, object userState) {
            if ((this.onBeginClearTempConfigDelegate == null)) {
                this.onBeginClearTempConfigDelegate = new BeginOperationDelegate(this.OnBeginClearTempConfig);
            }
            if ((this.onEndClearTempConfigDelegate == null)) {
                this.onEndClearTempConfigDelegate = new EndOperationDelegate(this.OnEndClearTempConfig);
            }
            if ((this.onClearTempConfigCompletedDelegate == null)) {
                this.onClearTempConfigCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClearTempConfigCompleted);
            }
            base.InvokeAsync(this.onBeginClearTempConfigDelegate, new object[] {
                        type}, this.onEndClearTempConfigDelegate, this.onClearTempConfigCompletedDelegate, userState);
        }
        
        public void UpdateTempInformation(string conferenceName, bool isSimpleModel, bool isEducationModel) {
            base.Channel.UpdateTempInformation(conferenceName, isSimpleModel, isEducationModel);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateTempInformation(string conferenceName, bool isSimpleModel, bool isEducationModel, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateTempInformation(conferenceName, isSimpleModel, isEducationModel, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUpdateTempInformation(System.IAsyncResult result) {
            base.Channel.EndUpdateTempInformation(result);
        }
        
        private System.IAsyncResult OnBeginUpdateTempInformation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            bool isSimpleModel = ((bool)(inValues[1]));
            bool isEducationModel = ((bool)(inValues[2]));
            return this.BeginUpdateTempInformation(conferenceName, isSimpleModel, isEducationModel, callback, asyncState);
        }
        
        private object[] OnEndUpdateTempInformation(System.IAsyncResult result) {
            this.EndUpdateTempInformation(result);
            return null;
        }
        
        private void OnUpdateTempInformationCompleted(object state) {
            if ((this.UpdateTempInformationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateTempInformationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateTempInformationAsync(string conferenceName, bool isSimpleModel, bool isEducationModel) {
            this.UpdateTempInformationAsync(conferenceName, isSimpleModel, isEducationModel, null);
        }
        
        public void UpdateTempInformationAsync(string conferenceName, bool isSimpleModel, bool isEducationModel, object userState) {
            if ((this.onBeginUpdateTempInformationDelegate == null)) {
                this.onBeginUpdateTempInformationDelegate = new BeginOperationDelegate(this.OnBeginUpdateTempInformation);
            }
            if ((this.onEndUpdateTempInformationDelegate == null)) {
                this.onEndUpdateTempInformationDelegate = new EndOperationDelegate(this.OnEndUpdateTempInformation);
            }
            if ((this.onUpdateTempInformationCompletedDelegate == null)) {
                this.onUpdateTempInformationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateTempInformationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateTempInformationDelegate, new object[] {
                        conferenceName,
                        isSimpleModel,
                        isEducationModel}, this.onEndUpdateTempInformationDelegate, this.onUpdateTempInformationCompletedDelegate, userState);
        }
        
        public void ClientControl(string conferenceName, string commander, ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType) {
            base.Channel.ClientControl(conferenceName, commander, ClientControlType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClientControl(string conferenceName, string commander, ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClientControl(conferenceName, commander, ClientControlType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndClientControl(System.IAsyncResult result) {
            base.Channel.EndClientControl(result);
        }
        
        private System.IAsyncResult OnBeginClientControl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string commander = ((string)(inValues[1]));
            ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType = ((ConferenceModel.ConferenceInfoWebService.ClientControlType)(inValues[2]));
            return this.BeginClientControl(conferenceName, commander, ClientControlType, callback, asyncState);
        }
        
        private object[] OnEndClientControl(System.IAsyncResult result) {
            this.EndClientControl(result);
            return null;
        }
        
        private void OnClientControlCompleted(object state) {
            if ((this.ClientControlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClientControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClientControlAsync(string conferenceName, string commander, ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType) {
            this.ClientControlAsync(conferenceName, commander, ClientControlType, null);
        }
        
        public void ClientControlAsync(string conferenceName, string commander, ConferenceModel.ConferenceInfoWebService.ClientControlType ClientControlType, object userState) {
            if ((this.onBeginClientControlDelegate == null)) {
                this.onBeginClientControlDelegate = new BeginOperationDelegate(this.OnBeginClientControl);
            }
            if ((this.onEndClientControlDelegate == null)) {
                this.onEndClientControlDelegate = new EndOperationDelegate(this.OnEndClientControl);
            }
            if ((this.onClientControlCompletedDelegate == null)) {
                this.onClientControlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClientControlCompleted);
            }
            base.InvokeAsync(this.onBeginClientControlDelegate, new object[] {
                        conferenceName,
                        commander,
                        ClientControlType}, this.onEndClientControlDelegate, this.onClientControlCompletedDelegate, userState);
        }
        
        public ConferenceModel.ConferenceInfoWebService.PortTypeEntity RunServerSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType) {
            return base.Channel.RunServerSocket(conferenceName, conferenceClientAcceptType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRunServerSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunServerSocket(conferenceName, conferenceClientAcceptType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ConferenceModel.ConferenceInfoWebService.PortTypeEntity EndRunServerSocket(System.IAsyncResult result) {
            return base.Channel.EndRunServerSocket(result);
        }
        
        private System.IAsyncResult OnBeginRunServerSocket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType = ((ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType)(inValues[1]));
            return this.BeginRunServerSocket(conferenceName, conferenceClientAcceptType, callback, asyncState);
        }
        
        private object[] OnEndRunServerSocket(System.IAsyncResult result) {
            ConferenceModel.ConferenceInfoWebService.PortTypeEntity retVal = this.EndRunServerSocket(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRunServerSocketCompleted(object state) {
            if ((this.RunServerSocketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunServerSocketCompleted(this, new RunServerSocketCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunServerSocketAsync(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType) {
            this.RunServerSocketAsync(conferenceName, conferenceClientAcceptType, null);
        }
        
        public void RunServerSocketAsync(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, object userState) {
            if ((this.onBeginRunServerSocketDelegate == null)) {
                this.onBeginRunServerSocketDelegate = new BeginOperationDelegate(this.OnBeginRunServerSocket);
            }
            if ((this.onEndRunServerSocketDelegate == null)) {
                this.onEndRunServerSocketDelegate = new EndOperationDelegate(this.OnEndRunServerSocket);
            }
            if ((this.onRunServerSocketCompletedDelegate == null)) {
                this.onRunServerSocketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunServerSocketCompleted);
            }
            base.InvokeAsync(this.onBeginRunServerSocketDelegate, new object[] {
                        conferenceName,
                        conferenceClientAcceptType}, this.onEndRunServerSocketDelegate, this.onRunServerSocketCompletedDelegate, userState);
        }
        
        public void FillSyncServiceData(string conferenceName, string sharer, ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType) {
            base.Channel.FillSyncServiceData(conferenceName, sharer, pageType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginFillSyncServiceData(string conferenceName, string sharer, ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFillSyncServiceData(conferenceName, sharer, pageType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndFillSyncServiceData(System.IAsyncResult result) {
            base.Channel.EndFillSyncServiceData(result);
        }
        
        private System.IAsyncResult OnBeginFillSyncServiceData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string sharer = ((string)(inValues[1]));
            ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType = ((ConferenceModel.ConferenceInfoWebService.ConferencePageType)(inValues[2]));
            return this.BeginFillSyncServiceData(conferenceName, sharer, pageType, callback, asyncState);
        }
        
        private object[] OnEndFillSyncServiceData(System.IAsyncResult result) {
            this.EndFillSyncServiceData(result);
            return null;
        }
        
        private void OnFillSyncServiceDataCompleted(object state) {
            if ((this.FillSyncServiceDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FillSyncServiceDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FillSyncServiceDataAsync(string conferenceName, string sharer, ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType) {
            this.FillSyncServiceDataAsync(conferenceName, sharer, pageType, null);
        }
        
        public void FillSyncServiceDataAsync(string conferenceName, string sharer, ConferenceModel.ConferenceInfoWebService.ConferencePageType pageType, object userState) {
            if ((this.onBeginFillSyncServiceDataDelegate == null)) {
                this.onBeginFillSyncServiceDataDelegate = new BeginOperationDelegate(this.OnBeginFillSyncServiceData);
            }
            if ((this.onEndFillSyncServiceDataDelegate == null)) {
                this.onEndFillSyncServiceDataDelegate = new EndOperationDelegate(this.OnEndFillSyncServiceData);
            }
            if ((this.onFillSyncServiceDataCompletedDelegate == null)) {
                this.onFillSyncServiceDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFillSyncServiceDataCompleted);
            }
            base.InvokeAsync(this.onBeginFillSyncServiceDataDelegate, new object[] {
                        conferenceName,
                        sharer,
                        pageType}, this.onEndFillSyncServiceDataDelegate, this.onFillSyncServiceDataCompletedDelegate, userState);
        }
        
        public bool SetKeepAlive() {
            return base.Channel.SetKeepAlive();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetKeepAlive(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetKeepAlive(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetKeepAlive(System.IAsyncResult result) {
            return base.Channel.EndSetKeepAlive(result);
        }
        
        private System.IAsyncResult OnBeginSetKeepAlive(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSetKeepAlive(callback, asyncState);
        }
        
        private object[] OnEndSetKeepAlive(System.IAsyncResult result) {
            bool retVal = this.EndSetKeepAlive(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetKeepAliveCompleted(object state) {
            if ((this.SetKeepAliveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetKeepAliveCompleted(this, new SetKeepAliveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetKeepAliveAsync() {
            this.SetKeepAliveAsync(null);
        }
        
        public void SetKeepAliveAsync(object userState) {
            if ((this.onBeginSetKeepAliveDelegate == null)) {
                this.onBeginSetKeepAliveDelegate = new BeginOperationDelegate(this.OnBeginSetKeepAlive);
            }
            if ((this.onEndSetKeepAliveDelegate == null)) {
                this.onEndSetKeepAliveDelegate = new EndOperationDelegate(this.OnEndSetKeepAlive);
            }
            if ((this.onSetKeepAliveCompletedDelegate == null)) {
                this.onSetKeepAliveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetKeepAliveCompleted);
            }
            base.InvokeAsync(this.onBeginSetKeepAliveDelegate, null, this.onEndSetKeepAliveDelegate, this.onSetKeepAliveCompletedDelegate, userState);
        }
        
        public void RemoveClientSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, string contactUrl) {
            base.Channel.RemoveClientSocket(conferenceName, conferenceClientAcceptType, contactUrl);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveClientSocket(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, string contactUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveClientSocket(conferenceName, conferenceClientAcceptType, contactUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveClientSocket(System.IAsyncResult result) {
            base.Channel.EndRemoveClientSocket(result);
        }
        
        private System.IAsyncResult OnBeginRemoveClientSocket(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType = ((ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType)(inValues[1]));
            string contactUrl = ((string)(inValues[2]));
            return this.BeginRemoveClientSocket(conferenceName, conferenceClientAcceptType, contactUrl, callback, asyncState);
        }
        
        private object[] OnEndRemoveClientSocket(System.IAsyncResult result) {
            this.EndRemoveClientSocket(result);
            return null;
        }
        
        private void OnRemoveClientSocketCompleted(object state) {
            if ((this.RemoveClientSocketCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveClientSocketCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveClientSocketAsync(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, string contactUrl) {
            this.RemoveClientSocketAsync(conferenceName, conferenceClientAcceptType, contactUrl, null);
        }
        
        public void RemoveClientSocketAsync(string conferenceName, ConferenceModel.ConferenceInfoWebService.ConferenceClientAcceptType conferenceClientAcceptType, string contactUrl, object userState) {
            if ((this.onBeginRemoveClientSocketDelegate == null)) {
                this.onBeginRemoveClientSocketDelegate = new BeginOperationDelegate(this.OnBeginRemoveClientSocket);
            }
            if ((this.onEndRemoveClientSocketDelegate == null)) {
                this.onEndRemoveClientSocketDelegate = new EndOperationDelegate(this.OnEndRemoveClientSocket);
            }
            if ((this.onRemoveClientSocketCompletedDelegate == null)) {
                this.onRemoveClientSocketCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveClientSocketCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveClientSocketDelegate, new object[] {
                        conferenceName,
                        conferenceClientAcceptType,
                        contactUrl}, this.onEndRemoveClientSocketDelegate, this.onRemoveClientSocketCompletedDelegate, userState);
        }
        
        public void RemoveAllClientSocketBySomeOne(string conferenceName, string contactUrl) {
            base.Channel.RemoveAllClientSocketBySomeOne(conferenceName, contactUrl);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveAllClientSocketBySomeOne(string conferenceName, string contactUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveAllClientSocketBySomeOne(conferenceName, contactUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveAllClientSocketBySomeOne(System.IAsyncResult result) {
            base.Channel.EndRemoveAllClientSocketBySomeOne(result);
        }
        
        private System.IAsyncResult OnBeginRemoveAllClientSocketBySomeOne(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string contactUrl = ((string)(inValues[1]));
            return this.BeginRemoveAllClientSocketBySomeOne(conferenceName, contactUrl, callback, asyncState);
        }
        
        private object[] OnEndRemoveAllClientSocketBySomeOne(System.IAsyncResult result) {
            this.EndRemoveAllClientSocketBySomeOne(result);
            return null;
        }
        
        private void OnRemoveAllClientSocketBySomeOneCompleted(object state) {
            if ((this.RemoveAllClientSocketBySomeOneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveAllClientSocketBySomeOneCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveAllClientSocketBySomeOneAsync(string conferenceName, string contactUrl) {
            this.RemoveAllClientSocketBySomeOneAsync(conferenceName, contactUrl, null);
        }
        
        public void RemoveAllClientSocketBySomeOneAsync(string conferenceName, string contactUrl, object userState) {
            if ((this.onBeginRemoveAllClientSocketBySomeOneDelegate == null)) {
                this.onBeginRemoveAllClientSocketBySomeOneDelegate = new BeginOperationDelegate(this.OnBeginRemoveAllClientSocketBySomeOne);
            }
            if ((this.onEndRemoveAllClientSocketBySomeOneDelegate == null)) {
                this.onEndRemoveAllClientSocketBySomeOneDelegate = new EndOperationDelegate(this.OnEndRemoveAllClientSocketBySomeOne);
            }
            if ((this.onRemoveAllClientSocketBySomeOneCompletedDelegate == null)) {
                this.onRemoveAllClientSocketBySomeOneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveAllClientSocketBySomeOneCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveAllClientSocketBySomeOneDelegate, new object[] {
                        conferenceName,
                        contactUrl}, this.onEndRemoveAllClientSocketBySomeOneDelegate, this.onRemoveAllClientSocketBySomeOneCompletedDelegate, userState);
        }
        
        public bool CheckUserIsOnline(string Uri) {
            return base.Channel.CheckUserIsOnline(Uri);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCheckUserIsOnline(string Uri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckUserIsOnline(Uri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCheckUserIsOnline(System.IAsyncResult result) {
            return base.Channel.EndCheckUserIsOnline(result);
        }
        
        private System.IAsyncResult OnBeginCheckUserIsOnline(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Uri = ((string)(inValues[0]));
            return this.BeginCheckUserIsOnline(Uri, callback, asyncState);
        }
        
        private object[] OnEndCheckUserIsOnline(System.IAsyncResult result) {
            bool retVal = this.EndCheckUserIsOnline(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckUserIsOnlineCompleted(object state) {
            if ((this.CheckUserIsOnlineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckUserIsOnlineCompleted(this, new CheckUserIsOnlineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckUserIsOnlineAsync(string Uri) {
            this.CheckUserIsOnlineAsync(Uri, null);
        }
        
        public void CheckUserIsOnlineAsync(string Uri, object userState) {
            if ((this.onBeginCheckUserIsOnlineDelegate == null)) {
                this.onBeginCheckUserIsOnlineDelegate = new BeginOperationDelegate(this.OnBeginCheckUserIsOnline);
            }
            if ((this.onEndCheckUserIsOnlineDelegate == null)) {
                this.onEndCheckUserIsOnlineDelegate = new EndOperationDelegate(this.OnEndCheckUserIsOnline);
            }
            if ((this.onCheckUserIsOnlineCompletedDelegate == null)) {
                this.onCheckUserIsOnlineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckUserIsOnlineCompleted);
            }
            base.InvokeAsync(this.onBeginCheckUserIsOnlineDelegate, new object[] {
                        Uri}, this.onEndCheckUserIsOnlineDelegate, this.onCheckUserIsOnlineCompletedDelegate, userState);
        }
        
        public void ClientHelper(ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity) {
            base.Channel.ClientHelper(entity);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginClientHelper(ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClientHelper(entity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndClientHelper(System.IAsyncResult result) {
            base.Channel.EndClientHelper(result);
        }
        
        private System.IAsyncResult OnBeginClientHelper(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity = ((ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity)(inValues[0]));
            return this.BeginClientHelper(entity, callback, asyncState);
        }
        
        private object[] OnEndClientHelper(System.IAsyncResult result) {
            this.EndClientHelper(result);
            return null;
        }
        
        private void OnClientHelperCompleted(object state) {
            if ((this.ClientHelperCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClientHelperCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClientHelperAsync(ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity) {
            this.ClientHelperAsync(entity, null);
        }
        
        public void ClientHelperAsync(ConferenceModel.ConferenceInfoWebService.ConferenceInfoEntity entity, object userState) {
            if ((this.onBeginClientHelperDelegate == null)) {
                this.onBeginClientHelperDelegate = new BeginOperationDelegate(this.OnBeginClientHelper);
            }
            if ((this.onEndClientHelperDelegate == null)) {
                this.onEndClientHelperDelegate = new EndOperationDelegate(this.OnEndClientHelper);
            }
            if ((this.onClientHelperCompletedDelegate == null)) {
                this.onClientHelperCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClientHelperCompleted);
            }
            base.InvokeAsync(this.onBeginClientHelperDelegate, new object[] {
                        entity}, this.onEndClientHelperDelegate, this.onClientHelperCompletedDelegate, userState);
        }
        
        public string GetConferenceInfoByMobile(string loginName) {
            return base.Channel.GetConferenceInfoByMobile(loginName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConferenceInfoByMobile(string loginName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConferenceInfoByMobile(loginName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetConferenceInfoByMobile(System.IAsyncResult result) {
            return base.Channel.EndGetConferenceInfoByMobile(result);
        }
        
        private System.IAsyncResult OnBeginGetConferenceInfoByMobile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string loginName = ((string)(inValues[0]));
            return this.BeginGetConferenceInfoByMobile(loginName, callback, asyncState);
        }
        
        private object[] OnEndGetConferenceInfoByMobile(System.IAsyncResult result) {
            string retVal = this.EndGetConferenceInfoByMobile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConferenceInfoByMobileCompleted(object state) {
            if ((this.GetConferenceInfoByMobileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConferenceInfoByMobileCompleted(this, new GetConferenceInfoByMobileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConferenceInfoByMobileAsync(string loginName) {
            this.GetConferenceInfoByMobileAsync(loginName, null);
        }
        
        public void GetConferenceInfoByMobileAsync(string loginName, object userState) {
            if ((this.onBeginGetConferenceInfoByMobileDelegate == null)) {
                this.onBeginGetConferenceInfoByMobileDelegate = new BeginOperationDelegate(this.OnBeginGetConferenceInfoByMobile);
            }
            if ((this.onEndGetConferenceInfoByMobileDelegate == null)) {
                this.onEndGetConferenceInfoByMobileDelegate = new EndOperationDelegate(this.OnEndGetConferenceInfoByMobile);
            }
            if ((this.onGetConferenceInfoByMobileCompletedDelegate == null)) {
                this.onGetConferenceInfoByMobileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConferenceInfoByMobileCompleted);
            }
            base.InvokeAsync(this.onBeginGetConferenceInfoByMobileDelegate, new object[] {
                        loginName}, this.onEndGetConferenceInfoByMobileDelegate, this.onGetConferenceInfoByMobileCompletedDelegate, userState);
        }
        
        public string RemoveClientSocketByIMM(string conferenceName, string contactUrl) {
            return base.Channel.RemoveClientSocketByIMM(conferenceName, contactUrl);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveClientSocketByIMM(string conferenceName, string contactUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveClientSocketByIMM(conferenceName, contactUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndRemoveClientSocketByIMM(System.IAsyncResult result) {
            return base.Channel.EndRemoveClientSocketByIMM(result);
        }
        
        private System.IAsyncResult OnBeginRemoveClientSocketByIMM(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string contactUrl = ((string)(inValues[1]));
            return this.BeginRemoveClientSocketByIMM(conferenceName, contactUrl, callback, asyncState);
        }
        
        private object[] OnEndRemoveClientSocketByIMM(System.IAsyncResult result) {
            string retVal = this.EndRemoveClientSocketByIMM(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveClientSocketByIMMCompleted(object state) {
            if ((this.RemoveClientSocketByIMMCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveClientSocketByIMMCompleted(this, new RemoveClientSocketByIMMCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveClientSocketByIMMAsync(string conferenceName, string contactUrl) {
            this.RemoveClientSocketByIMMAsync(conferenceName, contactUrl, null);
        }
        
        public void RemoveClientSocketByIMMAsync(string conferenceName, string contactUrl, object userState) {
            if ((this.onBeginRemoveClientSocketByIMMDelegate == null)) {
                this.onBeginRemoveClientSocketByIMMDelegate = new BeginOperationDelegate(this.OnBeginRemoveClientSocketByIMM);
            }
            if ((this.onEndRemoveClientSocketByIMMDelegate == null)) {
                this.onEndRemoveClientSocketByIMMDelegate = new EndOperationDelegate(this.OnEndRemoveClientSocketByIMM);
            }
            if ((this.onRemoveClientSocketByIMMCompletedDelegate == null)) {
                this.onRemoveClientSocketByIMMCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveClientSocketByIMMCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveClientSocketByIMMDelegate, new object[] {
                        conferenceName,
                        contactUrl}, this.onEndRemoveClientSocketByIMMDelegate, this.onRemoveClientSocketByIMMCompletedDelegate, userState);
        }
        
        public string GetIMMServerPort(string conferenceName) {
            return base.Channel.GetIMMServerPort(conferenceName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetIMMServerPort(string conferenceName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIMMServerPort(conferenceName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetIMMServerPort(System.IAsyncResult result) {
            return base.Channel.EndGetIMMServerPort(result);
        }
        
        private System.IAsyncResult OnBeginGetIMMServerPort(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            return this.BeginGetIMMServerPort(conferenceName, callback, asyncState);
        }
        
        private object[] OnEndGetIMMServerPort(System.IAsyncResult result) {
            string retVal = this.EndGetIMMServerPort(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIMMServerPortCompleted(object state) {
            if ((this.GetIMMServerPortCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIMMServerPortCompleted(this, new GetIMMServerPortCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIMMServerPortAsync(string conferenceName) {
            this.GetIMMServerPortAsync(conferenceName, null);
        }
        
        public void GetIMMServerPortAsync(string conferenceName, object userState) {
            if ((this.onBeginGetIMMServerPortDelegate == null)) {
                this.onBeginGetIMMServerPortDelegate = new BeginOperationDelegate(this.OnBeginGetIMMServerPort);
            }
            if ((this.onEndGetIMMServerPortDelegate == null)) {
                this.onEndGetIMMServerPortDelegate = new EndOperationDelegate(this.OnEndGetIMMServerPort);
            }
            if ((this.onGetIMMServerPortCompletedDelegate == null)) {
                this.onGetIMMServerPortCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIMMServerPortCompleted);
            }
            base.InvokeAsync(this.onBeginGetIMMServerPortDelegate, new object[] {
                        conferenceName}, this.onEndGetIMMServerPortDelegate, this.onGetIMMServerPortCompletedDelegate, userState);
        }
    }
}
