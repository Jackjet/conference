//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConferenceModel.ConferenceMatrixWebservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConferenceMatrixWebservice.ConferenceMatrixWebserviceSoap")]
    public interface ConferenceMatrixWebserviceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetMatrixEntity", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetMatrixEntity(string conferenceName, string sharer, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/SetMatrixEntity", ReplyAction="*")]
        System.IAsyncResult BeginSetMatrixEntity(string conferenceName, string sharer, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut, System.AsyncCallback callback, object asyncState);
        
        void EndSetMatrixEntity(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InToOneSeat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ConferenceMatrixBase))]
        ConferenceModel.ConferenceMatrixWebservice.SeatEntity[] InToOneSeat(string conferenceName, string seatList, string selfName, string selfIP);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/InToOneSeat", ReplyAction="*")]
        System.IAsyncResult BeginInToOneSeat(string conferenceName, string seatList, string selfName, string selfIP, System.AsyncCallback callback, object asyncState);
        
        ConferenceModel.ConferenceMatrixWebservice.SeatEntity[] EndInToOneSeat(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LeaveOneSeat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ConferenceMatrixBase))]
        void LeaveOneSeat(string conferenceName, string selfName, string selfIP);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/LeaveOneSeat", ReplyAction="*")]
        System.IAsyncResult BeginLeaveOneSeat(string conferenceName, string selfName, string selfIP, System.AsyncCallback callback, object asyncState);
        
        void EndLeaveOneSeat(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.57.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ConferenceMatrixOutPut {
        
        /// <remarks/>
        OutPut1,
        
        /// <remarks/>
        OutPut2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.57.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SeatEntity : ConferenceMatrixBase {
        
        private string settingIPField;
        
        private int settingNummberField;
        
        private string userNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string SettingIP {
            get {
                return this.settingIPField;
            }
            set {
                this.settingIPField = value;
                this.RaisePropertyChanged("SettingIP");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int SettingNummber {
            get {
                return this.settingNummberField;
            }
            set {
                this.settingNummberField = value;
                this.RaisePropertyChanged("SettingNummber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
                this.RaisePropertyChanged("UserName");
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeatEntity))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.57.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ConferenceMatrixBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ConferenceMatrixWebserviceSoapChannel : ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixWebserviceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InToOneSeatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InToOneSeatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ConferenceModel.ConferenceMatrixWebservice.SeatEntity[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ConferenceModel.ConferenceMatrixWebservice.SeatEntity[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConferenceMatrixWebserviceSoapClient : System.ServiceModel.ClientBase<ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixWebserviceSoap>, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixWebserviceSoap {
        
        private BeginOperationDelegate onBeginSetMatrixEntityDelegate;
        
        private EndOperationDelegate onEndSetMatrixEntityDelegate;
        
        private System.Threading.SendOrPostCallback onSetMatrixEntityCompletedDelegate;
        
        private BeginOperationDelegate onBeginInToOneSeatDelegate;
        
        private EndOperationDelegate onEndInToOneSeatDelegate;
        
        private System.Threading.SendOrPostCallback onInToOneSeatCompletedDelegate;
        
        private BeginOperationDelegate onBeginLeaveOneSeatDelegate;
        
        private EndOperationDelegate onEndLeaveOneSeatDelegate;
        
        private System.Threading.SendOrPostCallback onLeaveOneSeatCompletedDelegate;
        
        public ConferenceMatrixWebserviceSoapClient() {
        }
        
        public ConferenceMatrixWebserviceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConferenceMatrixWebserviceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceMatrixWebserviceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConferenceMatrixWebserviceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetMatrixEntityCompleted;
        
        public event System.EventHandler<InToOneSeatCompletedEventArgs> InToOneSeatCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LeaveOneSeatCompleted;
        
        public void SetMatrixEntity(string conferenceName, string sharer, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut) {
            base.Channel.SetMatrixEntity(conferenceName, sharer, conferenceMatrixOutPut);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetMatrixEntity(string conferenceName, string sharer, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetMatrixEntity(conferenceName, sharer, conferenceMatrixOutPut, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetMatrixEntity(System.IAsyncResult result) {
            base.Channel.EndSetMatrixEntity(result);
        }
        
        private System.IAsyncResult OnBeginSetMatrixEntity(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string sharer = ((string)(inValues[1]));
            ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut = ((ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut)(inValues[2]));
            return this.BeginSetMatrixEntity(conferenceName, sharer, conferenceMatrixOutPut, callback, asyncState);
        }
        
        private object[] OnEndSetMatrixEntity(System.IAsyncResult result) {
            this.EndSetMatrixEntity(result);
            return null;
        }
        
        private void OnSetMatrixEntityCompleted(object state) {
            if ((this.SetMatrixEntityCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetMatrixEntityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetMatrixEntityAsync(string conferenceName, string sharer, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut) {
            this.SetMatrixEntityAsync(conferenceName, sharer, conferenceMatrixOutPut, null);
        }
        
        public void SetMatrixEntityAsync(string conferenceName, string sharer, ConferenceModel.ConferenceMatrixWebservice.ConferenceMatrixOutPut conferenceMatrixOutPut, object userState) {
            if ((this.onBeginSetMatrixEntityDelegate == null)) {
                this.onBeginSetMatrixEntityDelegate = new BeginOperationDelegate(this.OnBeginSetMatrixEntity);
            }
            if ((this.onEndSetMatrixEntityDelegate == null)) {
                this.onEndSetMatrixEntityDelegate = new EndOperationDelegate(this.OnEndSetMatrixEntity);
            }
            if ((this.onSetMatrixEntityCompletedDelegate == null)) {
                this.onSetMatrixEntityCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetMatrixEntityCompleted);
            }
            base.InvokeAsync(this.onBeginSetMatrixEntityDelegate, new object[] {
                        conferenceName,
                        sharer,
                        conferenceMatrixOutPut}, this.onEndSetMatrixEntityDelegate, this.onSetMatrixEntityCompletedDelegate, userState);
        }
        
        public ConferenceModel.ConferenceMatrixWebservice.SeatEntity[] InToOneSeat(string conferenceName, string seatList, string selfName, string selfIP) {
            return base.Channel.InToOneSeat(conferenceName, seatList, selfName, selfIP);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInToOneSeat(string conferenceName, string seatList, string selfName, string selfIP, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInToOneSeat(conferenceName, seatList, selfName, selfIP, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ConferenceModel.ConferenceMatrixWebservice.SeatEntity[] EndInToOneSeat(System.IAsyncResult result) {
            return base.Channel.EndInToOneSeat(result);
        }
        
        private System.IAsyncResult OnBeginInToOneSeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string seatList = ((string)(inValues[1]));
            string selfName = ((string)(inValues[2]));
            string selfIP = ((string)(inValues[3]));
            return this.BeginInToOneSeat(conferenceName, seatList, selfName, selfIP, callback, asyncState);
        }
        
        private object[] OnEndInToOneSeat(System.IAsyncResult result) {
            ConferenceModel.ConferenceMatrixWebservice.SeatEntity[] retVal = this.EndInToOneSeat(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInToOneSeatCompleted(object state) {
            if ((this.InToOneSeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InToOneSeatCompleted(this, new InToOneSeatCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InToOneSeatAsync(string conferenceName, string seatList, string selfName, string selfIP) {
            this.InToOneSeatAsync(conferenceName, seatList, selfName, selfIP, null);
        }
        
        public void InToOneSeatAsync(string conferenceName, string seatList, string selfName, string selfIP, object userState) {
            if ((this.onBeginInToOneSeatDelegate == null)) {
                this.onBeginInToOneSeatDelegate = new BeginOperationDelegate(this.OnBeginInToOneSeat);
            }
            if ((this.onEndInToOneSeatDelegate == null)) {
                this.onEndInToOneSeatDelegate = new EndOperationDelegate(this.OnEndInToOneSeat);
            }
            if ((this.onInToOneSeatCompletedDelegate == null)) {
                this.onInToOneSeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInToOneSeatCompleted);
            }
            base.InvokeAsync(this.onBeginInToOneSeatDelegate, new object[] {
                        conferenceName,
                        seatList,
                        selfName,
                        selfIP}, this.onEndInToOneSeatDelegate, this.onInToOneSeatCompletedDelegate, userState);
        }
        
        public void LeaveOneSeat(string conferenceName, string selfName, string selfIP) {
            base.Channel.LeaveOneSeat(conferenceName, selfName, selfIP);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLeaveOneSeat(string conferenceName, string selfName, string selfIP, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLeaveOneSeat(conferenceName, selfName, selfIP, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLeaveOneSeat(System.IAsyncResult result) {
            base.Channel.EndLeaveOneSeat(result);
        }
        
        private System.IAsyncResult OnBeginLeaveOneSeat(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string conferenceName = ((string)(inValues[0]));
            string selfName = ((string)(inValues[1]));
            string selfIP = ((string)(inValues[2]));
            return this.BeginLeaveOneSeat(conferenceName, selfName, selfIP, callback, asyncState);
        }
        
        private object[] OnEndLeaveOneSeat(System.IAsyncResult result) {
            this.EndLeaveOneSeat(result);
            return null;
        }
        
        private void OnLeaveOneSeatCompleted(object state) {
            if ((this.LeaveOneSeatCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LeaveOneSeatCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LeaveOneSeatAsync(string conferenceName, string selfName, string selfIP) {
            this.LeaveOneSeatAsync(conferenceName, selfName, selfIP, null);
        }
        
        public void LeaveOneSeatAsync(string conferenceName, string selfName, string selfIP, object userState) {
            if ((this.onBeginLeaveOneSeatDelegate == null)) {
                this.onBeginLeaveOneSeatDelegate = new BeginOperationDelegate(this.OnBeginLeaveOneSeat);
            }
            if ((this.onEndLeaveOneSeatDelegate == null)) {
                this.onEndLeaveOneSeatDelegate = new EndOperationDelegate(this.OnEndLeaveOneSeat);
            }
            if ((this.onLeaveOneSeatCompletedDelegate == null)) {
                this.onLeaveOneSeatCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLeaveOneSeatCompleted);
            }
            base.InvokeAsync(this.onBeginLeaveOneSeatDelegate, new object[] {
                        conferenceName,
                        selfName,
                        selfIP}, this.onEndLeaveOneSeatDelegate, this.onLeaveOneSeatCompletedDelegate, userState);
        }
    }
}
